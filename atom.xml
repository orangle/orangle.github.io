<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Orangleliu Notes</title>
  
  <subtitle>爱媳妇，爱生活，Linux，Python</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://orangleliu.info/"/>
  <updated>2017-03-24T08:37:29.000Z</updated>
  <id>http://orangleliu.info/</id>
  
  <author>
    <name>orangleliu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Openresty generates QR code</title>
    <link href="http://orangleliu.info/2017/03/24/openresty-lua-resty-qrcode/"/>
    <id>http://orangleliu.info/2017/03/24/openresty-lua-resty-qrcode/</id>
    <published>2017-03-24T05:45:11.000Z</published>
    <updated>2017-03-24T08:37:29.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>I would like to use openresty(ngx_lua) to do QRcode generation API, then I found two libraries <a href="https://github.com/dcshi/lua-resty-QRcode" target="_blank" rel="noopener">lua-resty-QRcode</a> and <a href="https://github.com/vincascm/qrencode" target="_blank" rel="noopener">qrencode</a>. After comparison，<a href="https://github.com/vincascm/qrencode" target="_blank" rel="noopener">qrencode</a> is simple to install and use, here is an example of hope that interested friends have inspired</p></blockquote><p>Both of these libraries are dependent <a href="http://fukuchi.org/works/qrencode/" target="_blank" rel="noopener">libqrencode</a> and <a href="http://www.libpng.org/pub/png/libpng.html" target="_blank" rel="noopener">libpng</a> </p><p>Steps for usage:</p><ul><li>install <a href="http://fukuchi.org/works/qrencode/" target="_blank" rel="noopener">libqrencode</a> and <a href="http://www.libpng.org/pub/png/libpng.html" target="_blank" rel="noopener">libpng</a> </li><li>get qrencode, and compiled into a dynamic library <code>qrencode.so</code></li><li>Openresty lua call dynamic library to generate qrcode </li></ul><p>openresty1.9.7  was installed on my Mac book.</p><h2 id="install-libqrencode，libpng"><a href="#install-libqrencode，libpng" class="headerlink" title="install libqrencode，libpng"></a>install libqrencode，libpng</h2><p>you can install them with source code, or following methods</p><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install libqrencode-<span class="built_in">dev</span> libpng12-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><h3 id="CentOS7"><a href="#CentOS7" class="headerlink" title="CentOS7"></a>CentOS7</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install libpng-devel</span><br><span class="line"></span><br><span class="line">wget http:<span class="comment">//ftp.riken.jp/Linux/centos/7/os/x86_64/Packages/qrencode-devel-3.4.1-3.el7.x86_64.rpm</span></span><br><span class="line">rpm -ivh qrencode-devel-<span class="number">3.4</span>.<span class="number">1</span>-<span class="number">3</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span><span class="selector-class">.rpm</span></span><br></pre></td></tr></table></figure><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>libqrencode</span><br></pre></td></tr></table></figure><p>will auto install libpng.</p><h2 id="install-lua-library-qrencode"><a href="#install-lua-library-qrencode" class="headerlink" title="install lua library qrencode"></a>install lua library qrencode</h2><p>！！For the use of openresty I rewrite the makefile, you can find  <a href="https://github.com/orangle/lua-resty-qrencode" target="_blank" rel="noopener">https://github.com/orangle/lua-resty-qrencode</a> , the Makefile default for Macos, if you use other os like centos, please read Makefile and modify it.</p><p>manual version is below</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/vincascm/qrencode.git</span></span><br><span class="line"></span><br><span class="line">## <span class="keyword">on</span> macos </span><br><span class="line">gcc -bundle -undefined dynamic_lookup -lpng -lqrencode -I/usr/<span class="keyword">local</span>/openresty/luajit/<span class="keyword">include</span>/luajit-2.1/ qrencode.c -o qrencode.<span class="keyword">so</span></span><br><span class="line">cp <span class="keyword">test</span>/<span class="keyword">test</span>.lua ./</span><br><span class="line">/usr/<span class="keyword">local</span>/openresty/luajit/bin/luajit <span class="keyword">test</span>.lua</span><br></pre></td></tr></table></figure><p>then you can see some output on your screen.</p><h2 id="openresty-qrcode-code"><a href="#openresty-qrcode-code" class="headerlink" title="openresty qrcode code"></a>openresty qrcode code</h2><p>copy qrencode.so to openresty’s lualib directory, or you can set lualib path in nginx conf file.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp qrencode.so  <span class="regexp">/usr/</span>local<span class="regexp">/openresty/</span>lualib<span class="regexp">/</span></span><br></pre></td></tr></table></figure><p>lua code in nginx conf<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">location /qrcode &#123;</span><br><span class="line">        content_by_lua_block &#123;</span><br><span class="line">            <span class="built_in">local</span> qr = require(<span class="string">"qrencode"</span>)</span><br><span class="line">            <span class="built_in">local</span> args = ngx.req.get_uri_args()</span><br><span class="line">            <span class="built_in">local</span> <span class="built_in">text</span> = args.<span class="built_in">text</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">text</span> == <span class="literal">nil</span> <span class="built_in">or</span> <span class="built_in">text</span>== <span class="string">""</span> <span class="keyword">then</span></span><br><span class="line">                ngx.<span class="built_in">say</span>(<span class="string">'need a text param'</span>)</span><br><span class="line">                ngx.<span class="keyword">exit</span>(<span class="number">404</span>)</span><br><span class="line">            end</span><br><span class="line">            </span><br><span class="line">            ngx.<span class="built_in">say</span>(qr &#123;</span><br><span class="line">                <span class="built_in">text</span>=<span class="built_in">text</span>,</span><br><span class="line">                level=<span class="string">"L"</span>,</span><br><span class="line">                kanji=<span class="literal">false</span>,</span><br><span class="line">                ansi=<span class="literal">true</span>,</span><br><span class="line">                <span class="built_in">size</span>=<span class="number">4</span>,</span><br><span class="line">                margin=<span class="number">2</span>,</span><br><span class="line">                symversion=<span class="number">0</span>,</span><br><span class="line">                dpi=<span class="number">78</span>,</span><br><span class="line">                casesensitive=<span class="literal">true</span>,</span><br><span class="line">                foreground=<span class="string">"48AF6D"</span>,</span><br><span class="line">                background=<span class="string">"3FAF6F"</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>using curl to testing</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 'http://127.0.0.1:<span class="number">8008</span>/qrcode?text=http://orangleliu.info'</span><br></pre></td></tr></table></figure><p>then you see a qrcode picture, test is ok. </p><p><img src="http://img.blog.csdn.net/20170322131251751?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb3JhbmdsZWxpdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="openresty 二维码"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;I would like to use openresty(ngx_lua) to do QRcode generation API, then I found two libraries &lt;a href=&quot;https://github.com/d
      
    
    </summary>
    
      <category term="技术" scheme="http://orangleliu.info/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="openresty" scheme="http://orangleliu.info/tags/openresty/"/>
    
  </entry>
  
  <entry>
    <title>Python logging 模块和使用经验</title>
    <link href="http://orangleliu.info/2016/12/27/python-logging-module-using-thinking/"/>
    <id>http://orangleliu.info/2016/12/27/python-logging-module-using-thinking/</id>
    <published>2016-12-27T07:49:09.000Z</published>
    <updated>2016-12-27T07:53:15.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>记录下常用的一些东西，每次用总是查文档有点小麻烦。 py2.7<br>日志应该是生产应用的重要生命线，谁都不应该掉以轻心</p></blockquote><h2 id="有益原则"><a href="#有益原则" class="headerlink" title="有益原则"></a>有益原则</h2><h3 id="级别分离"><a href="#级别分离" class="headerlink" title="级别分离"></a>级别分离</h3><p>日志系统通常有下面几种级别，看情况是使用</p><ul><li>FATAL - 导致程序退出的严重系统级错误，不可恢复，当错误发生时，系统管理员需要立即介入，谨慎使用。</li><li>ERROR - 运行时异常以及预期之外的错误，也需要立即处理，但紧急程度低于FATAL,当错误发生时，影响了程序的正确执行。需要注意的是这两种级别属于服务自己的错误，需要管理员介入，用户输入出错不属于此分类。</li><li>WARN - 预期之外的运行时状况，表示系统可能出现问题。对于那些目前还不是错误，然而不及时处理也会变成错误的情况，也可以记为WARN，如磁盘过低。</li><li>INFO - 有意义的事件信息，记录程序正常的运行状态，比如收到请求，成功执行。通过查看INFO,可以快速定位WARN，ERROR, FATAL。INFO不宜过多，通常情况下不超过TRACE的10%。</li><li>DEBUG - 与程序运行时的流程相关的详细信息以及当前变量状态。</li><li>TRACE - 更详细的跟踪信息。DEBUG和TRACE这两种规范由项目组自己定义,通过该种日志，可以查看某一个操作每一步的执行过程，可以准确定位是何种操作，何种参数，何种顺序导致了某种错误的发生</li></ul><h3 id="单独目录"><a href="#单独目录" class="headerlink" title="单独目录"></a>单独目录</h3><p>日志最好放到单独的日志目录，例如 <code>/var/logs/</code> 下，按照应用分成不同的目录，或者是文件。日志不要放在应用目录下，那样不利于自动化部署和应用升级，备份等。</p><h3 id="日志分类"><a href="#日志分类" class="headerlink" title="日志分类"></a>日志分类</h3><p>诊断日志，统计日志，审计日志等等，不同用途等日志存储到不同的文件中，方面后面的查询，分析。</p><h3 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h3><p>不管是web日志，还是应用日志，最好有一个比较统一的格式（例如时间格式），方面日志的查询，入库，和分析。还有一些应用统一使用json的日志格式，也挺好的。</p><h3 id="不好的做法"><a href="#不好的做法" class="headerlink" title="不好的做法"></a>不好的做法</h3><ul><li>日志中含有用户敏感信息</li><li>线上程序中使用 print</li><li>生产环境使用 debug 级别日志 😢</li></ul><h3 id="日志切分"><a href="#日志切分" class="headerlink" title="日志切分"></a>日志切分</h3><p>日志可以按照每天，每周或者是文件的大小，切分之后压缩。一方面容易按时间回溯，另一方面可以减少磁盘空间，对于很久之前的日志，可以传输到远程服务器，或者是删除。</p><h2 id="Python-日志"><a href="#Python-日志" class="headerlink" title="Python 日志"></a>Python 日志</h2><h3 id="好习惯"><a href="#好习惯" class="headerlink" title="好习惯"></a>好习惯</h3><ul><li>root级别的设置: 日志格式, 有利于标准化</li><li>class 中设置logger <code>self.logger = logging.getLogger(type(self).__name__)</code></li><li>模块，文件中设置 logger <code>logger = logging.getLogger(__name__)</code></li><li>使用JSON YAML等格式来配置logging，感觉比使用代码或者 ini格式看起来更方面</li><li>错误日志是比较特殊的日志，因为它需要更多的信息，例如错误产生的上下文，还有错误堆栈等信息。可以通过 <code>python logging context pypi</code> 关键词google一些信息，或者自己设计一个 logging handler 来实现。</li></ul><h3 id="实际问题"><a href="#实际问题" class="headerlink" title="实际问题"></a>实际问题</h3><ul><li>简单的小应用中，单个日志文件，同时还要打印控制台</li></ul><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.DEBUG,</span><br><span class="line">                    format=<span class="string">'%(asctime)s %(name)-12s %(levelname)-8s %(message)s'</span>,</span><br><span class="line">                    datefmt=<span class="string">'%m-%d %H:%M'</span>,</span><br><span class="line">                    filename=<span class="string">'/temp/myapp.log'</span>,</span><br><span class="line">                    filemode=<span class="string">'w'</span>)</span><br><span class="line"><span class="built_in">console</span> = logging.StreamHandler()</span><br><span class="line"><span class="built_in">console</span>.setLevel(logging.INFO)</span><br><span class="line">formatter = logging.Formatter(<span class="string">'%(name)-12s: %(levelname)-8s %(message)s'</span>)</span><br><span class="line"><span class="built_in">console</span>.setFormatter(formatter)</span><br><span class="line"><span class="comment"># add the handler to the root logger</span></span><br><span class="line">logging.getLogger(<span class="string">''</span>).addHandler(<span class="built_in">console</span>)</span><br></pre></td></tr></table></figure><ul><li>记录 Exception 的trace 信息（很有用哦)</li></ul><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    <span class="keyword">open</span>('/path/<span class="keyword">to</span>/does/<span class="keyword">not</span>/exist', <span class="symbol">'rb</span>')</span><br><span class="line">except (SystemExit, KeyboardInterrupt):</span><br><span class="line">    raise</span><br><span class="line">except Exception, e:</span><br><span class="line">    logger.<span class="literal">error</span>(<span class="symbol">'Failed</span> <span class="keyword">to</span> <span class="keyword">open</span> <span class="keyword">file</span>', exc_info=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ul><li>ini 格式例子</li></ul><p>这里用了第三方的一个handler，ConcurrentRotatingFileHandler， 实现多进程安全</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[loggers]</span></span><br><span class="line"><span class="attr">keys</span>=root</span><br><span class="line"></span><br><span class="line"><span class="section">[handlers]</span></span><br><span class="line"><span class="attr">keys</span>=stream, rotatingFile, errorFile</span><br><span class="line"></span><br><span class="line"><span class="section">[formatters]</span></span><br><span class="line"><span class="attr">keys</span>=form01</span><br><span class="line"></span><br><span class="line"><span class="section">[logger_root]</span></span><br><span class="line"><span class="attr">level</span>=DEBUG</span><br><span class="line"><span class="attr">handlers</span>=stream, rotatingFile, errorFile</span><br><span class="line"></span><br><span class="line"><span class="section">[handler_stream]</span></span><br><span class="line"><span class="attr">class</span>=StreamHandler</span><br><span class="line"><span class="attr">level</span>=NOTSET</span><br><span class="line"><span class="attr">formatter</span>=form01</span><br><span class="line"><span class="attr">args</span>=(sys.stdout,)</span><br><span class="line"></span><br><span class="line"><span class="section">[handler_errorFile]</span></span><br><span class="line"><span class="attr">class</span>=FileHandler</span><br><span class="line"><span class="attr">level</span>=ERROR</span><br><span class="line"><span class="attr">formatter</span>=form01</span><br><span class="line"><span class="attr">args</span>=(<span class="string">'./logs/portal.log'</span>, <span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">[handler_rotatingFile]</span></span><br><span class="line"><span class="attr">level</span>=INFO</span><br><span class="line"><span class="attr">formatter</span>=form01</span><br><span class="line"><span class="attr">class</span>=handlers.ConcurrentRotatingFileHandler</span><br><span class="line"><span class="attr">args</span>=(<span class="string">'./logs/portal.log'</span>,<span class="string">'a'</span>,<span class="number">50240000</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">[formatter_form01]</span></span><br><span class="line"><span class="attr">format</span>=%(asctime)s %(name)s %(levelname)s %(message)s</span><br><span class="line"><span class="attr">datefmt</span>=</span><br><span class="line"><span class="attr">class</span>=logging.Formatter</span><br></pre></td></tr></table></figure><p>引用<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">import logging.config</span><br><span class="line">import cloghandler</span><br><span class="line">logging.config.fileConfig(join(BASE_DIR, <span class="string">"conf/log.conf"</span>))</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br></pre></td></tr></table></figure></p><p>默认会使用 root 这个logger，如果名称匹配就使用对应的logger。 一个logger也可以指定多个 handdler, 用来处理不同的日志级别等。</p><ul><li>JSON格式 例子</li></ul><p>配置<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"disable_existing_loggers"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"formatters"</span>: &#123;</span><br><span class="line">        <span class="attr">"simple"</span>: &#123;</span><br><span class="line">            <span class="attr">"format"</span>: <span class="string">"%(asctime)s - %(name)s - %(levelname)s - %(message)s"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"handlers"</span>: &#123;</span><br><span class="line">        <span class="attr">"console"</span>: &#123;</span><br><span class="line">            <span class="attr">"class"</span>: <span class="string">"logging.StreamHandler"</span>,</span><br><span class="line">            <span class="attr">"level"</span>: <span class="string">"DEBUG"</span>,</span><br><span class="line">            <span class="attr">"formatter"</span>: <span class="string">"simple"</span>,</span><br><span class="line">            <span class="attr">"stream"</span>: <span class="string">"ext://sys.stdout"</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="attr">"info_file_handler"</span>: &#123;</span><br><span class="line">            <span class="attr">"class"</span>: <span class="string">"logging.handlers.RotatingFileHandler"</span>,</span><br><span class="line">            <span class="attr">"level"</span>: <span class="string">"INFO"</span>,</span><br><span class="line">            <span class="attr">"formatter"</span>: <span class="string">"simple"</span>,</span><br><span class="line">            <span class="attr">"filename"</span>: <span class="string">"info.log"</span>,</span><br><span class="line">            <span class="attr">"maxBytes"</span>: <span class="number">10485760</span>,</span><br><span class="line">            <span class="attr">"backupCount"</span>: <span class="number">20</span>,</span><br><span class="line">            <span class="attr">"encoding"</span>: <span class="string">"utf8"</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="attr">"error_file_handler"</span>: &#123;</span><br><span class="line">            <span class="attr">"class"</span>: <span class="string">"logging.handlers.RotatingFileHandler"</span>,</span><br><span class="line">            <span class="attr">"level"</span>: <span class="string">"ERROR"</span>,</span><br><span class="line">            <span class="attr">"formatter"</span>: <span class="string">"simple"</span>,</span><br><span class="line">            <span class="attr">"filename"</span>: <span class="string">"errors.log"</span>,</span><br><span class="line">            <span class="attr">"maxBytes"</span>: <span class="number">10485760</span>,</span><br><span class="line">            <span class="attr">"backupCount"</span>: <span class="number">20</span>,</span><br><span class="line">            <span class="attr">"encoding"</span>: <span class="string">"utf8"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"loggers"</span>: &#123;</span><br><span class="line">        <span class="attr">"my_module"</span>: &#123;</span><br><span class="line">            <span class="attr">"level"</span>: <span class="string">"ERROR"</span>,</span><br><span class="line">            <span class="attr">"handlers"</span>: [<span class="string">"console"</span>],</span><br><span class="line">            <span class="attr">"propagate"</span>: <span class="string">"no"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"root"</span>: &#123;</span><br><span class="line">        <span class="attr">"level"</span>: <span class="string">"INFO"</span>,</span><br><span class="line">        <span class="attr">"handlers"</span>: [<span class="string">"console"</span>, <span class="string">"info_file_handler"</span>, <span class="string">"error_file_handler"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>获取配置<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"></span><br><span class="line">def setup<span class="number">_</span>logging(</span><br><span class="line">    <span class="keyword">default</span><span class="number">_p</span>ath=<span class="string">'logging.json'</span>,</span><br><span class="line">    <span class="keyword">default</span><span class="number">_</span>level=logging.INFO,</span><br><span class="line">    env<span class="number">_k</span>ey=<span class="string">'LOG_CFG'</span></span><br><span class="line">):</span><br><span class="line">    <span class="string">"""Setup logging configuration</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    path = <span class="keyword">default</span><span class="number">_p</span>ath</span><br><span class="line">    <span class="keyword">value</span> = os.getenv(env<span class="number">_k</span>ey, None)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">value</span>:</span><br><span class="line">        path = <span class="keyword">value</span></span><br><span class="line">    <span class="keyword">if</span> os.path.<span class="keyword">exists</span>(path):</span><br><span class="line">        with open(path, <span class="string">'rt'</span>) as f:</span><br><span class="line">            config = json.load(f)</span><br><span class="line">        logging.config.dictConfig(config)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.basicConfig(level=<span class="keyword">default</span><span class="number">_</span>level)</span><br></pre></td></tr></table></figure></p><ul><li>把日志格式化成json的工具</li></ul><p><a href="https://github.com/madzak/python-json-logger" target="_blank" rel="noopener">python-json-logger</a>，<a href="https://github.com/logmatic/logmatic-python/blob/master/logmatic/__init__.py" target="_blank" rel="noopener">logmatic</a> json-logger增加的一些封装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging.handlers</span><br><span class="line"><span class="keyword">from</span> pythonjsonlogger <span class="keyword">import</span> jsonlogger</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonFormatter</span><span class="params">(jsonlogger.JsonFormatter, object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,</span></span></span><br><span class="line"><span class="function"><span class="params">                 fmt=<span class="string">"%(asctime) %(name) %(processName) %(filename)  %(funcName) %(levelname) %(lineno) %(module) %(threadName) %(message)"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 datefmt=<span class="string">"%Y-%m-%dT%H:%M:%SZ%z"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 style=<span class="string">'%'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 extra=&#123;&#125;, *args, **kwargs)</span>:</span></span><br><span class="line">        self._extra = extra</span><br><span class="line">        jsonlogger.JsonFormatter.__init__(self, fmt=fmt, datefmt=datefmt, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_log_record</span><span class="params">(self, log_record)</span>:</span></span><br><span class="line">        <span class="comment"># Enforce the presence of a timestamp</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"asctime"</span> <span class="keyword">in</span> log_record:</span><br><span class="line">            log_record[<span class="string">"timestamp"</span>] = log_record[<span class="string">"asctime"</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            log_record[<span class="string">"timestamp"</span>] = datetime.datetime.utcnow().strftime(<span class="string">"%Y-%m-%dT%H:%M:%S.%fZ%z"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self._extra <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">for</span> key, value <span class="keyword">in</span> self._extra.items():</span><br><span class="line">                log_record[key] = value</span><br><span class="line">        <span class="keyword">return</span> super(JsonFormatter, self).process_log_record(log_record)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://docs.python.org/2/howto/logging-cookbook.html#logging-cookbook" target="_blank" rel="noopener">Logging Cookbook</a> 文档一定是要看的</li><li><a href="http://themoon.me/2016/01/05/日志最佳实践/" target="_blank" rel="noopener">日志最佳实践</a></li><li><a href="https://fangpenlin.com/posts/2012/08/26/good-logging-practice-in-python/" target="_blank" rel="noopener">good-logging-practice-in-python</a></li><li><a href="https://sentry.io/" target="_blank" rel="noopener">Sentry</a> 日志收集，分析系统，基于Python</li><li><a href="#">ConcurrentLogHandler</a> 解决多进程日志同步问题</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;记录下常用的一些东西，每次用总是查文档有点小麻烦。 py2.7&lt;br&gt;日志应该是生产应用的重要生命线，谁都不应该掉以轻心&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;有益原则&quot;&gt;&lt;a href=&quot;#有益原
      
    
    </summary>
    
      <category term="编程" scheme="http://orangleliu.info/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="logging" scheme="http://orangleliu.info/tags/logging/"/>
    
  </entry>
  
  <entry>
    <title>uWSGI and Nginx deploy Django project</title>
    <link href="http://orangleliu.info/2016/10/29/uwsgi-nginx-deploy-django-project/"/>
    <id>http://orangleliu.info/2016/10/29/uwsgi-nginx-deploy-django-project/</id>
    <published>2016-10-29T08:22:14.000Z</published>
    <updated>2016-10-29T08:27:31.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><ul><li>django version:1.6</li><li>os version: Centos 6.2</li><li>nginx version: 1.4.2</li><li>uwsgi version: 2.0.8</li><li>python version: 2.7.5</li></ul><h2 id="directory"><a href="#directory" class="headerlink" title="directory"></a>directory</h2><ol><li>django project is in <strong>/home/erya/hawk</strong> and settings.py is at <strong>/home/erya/hawk/settings.py</strong></li><li><strong>nginx conf</strong> is at  <strong>/usr/local/nginx/conf</strong></li></ol><h2 id="deployment"><a href="#deployment" class="headerlink" title="deployment"></a>deployment</h2><ul><li>This is not a exhaustive reference, I assume all the softwares were installed correct.</li><li>I record some key point when deploy the project.</li><li>the web client <-> the web server <-> the socket <-> uwsgi <-> Django</-></-></-></-></li></ul><h3 id="small-test"><a href="#small-test" class="headerlink" title="small test"></a>small test</h3><p>use django dev server:   python manage.py runserver 8000   OK!<br>use uwsgi setup django:  uwsgi –http :8000 –module wsgi    OK!</p><p>it seems ok, the important parts coming!</p><h3 id="uwsgi-configure"><a href="#uwsgi-configure" class="headerlink" title="uwsgi configure"></a>uwsgi configure</h3><p>create uwsgi.ini file in django project directorythe file’s content is :</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">chdir</span>=/home/erya/hawk</span><br><span class="line"><span class="attr">module</span>=wsgi</span><br><span class="line"></span><br><span class="line"><span class="attr">master</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">processes</span>=<span class="number">10</span></span><br><span class="line"><span class="attr">pidfile</span>=/home/erya/hawk.pid</span><br><span class="line"><span class="attr">vacuum</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">max-requests</span>=<span class="number">5000</span></span><br><span class="line"><span class="attr">enable-threads</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">socket</span>=<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9001</span></span><br></pre></td></tr></table></figure><h3 id="nginx-configure"><a href="#nginx-configure" class="headerlink" title="nginx configure"></a>nginx configure</h3><p>check  <strong>uwsgi_params </strong> file in nginx conf or you can donwload it from github <a href="https://github.com/nginx/nginx/blob/master/conf/uwsgi_params" target="_blank" rel="noopener">https://github.com/nginx/nginx/blob/master/conf/uwsgi_params</a><br>and put it in nginx conf directory.</p><p>add uwsgi.conf file,the content is :</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">8000</span>;</span><br><span class="line">        <span class="attribute">server_name</span> <span class="number">127.0.0.1</span>;</span><br><span class="line"><span class="comment">#       client_max_body_size 64M;</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="comment">#           client_max_body_size 4M;</span></span><br><span class="line">            <span class="attribute">uwsgi_pass</span>   <span class="number">127.0.0.1:9001</span>;</span><br><span class="line">            <span class="attribute">include</span>     uwsgi_params;</span><br><span class="line">            <span class="attribute">access_log</span>  <span class="literal">off</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>add one line to nginx.conf ,like</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">    include uwsgi.conf;    ####here</span><br><span class="line">    <span class="built_in">..</span>.</span><br><span class="line">   <span class="built_in"> server </span>&#123;</span><br><span class="line">        <span class="built_in">..</span><span class="built_in">..</span></span><br></pre></td></tr></table></figure><h2 id="start-up-the-use-have-the-permission"><a href="#start-up-the-use-have-the-permission" class="headerlink" title="start up(the use have the permission)"></a>start up(the use have the permission)</h2><p>uwsgi: in project directory</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi <span class="comment">--ini uwsgi.ini</span></span><br></pre></td></tr></table></figure><p>nginx:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin<span class="regexp">/nginx</span></span><br></pre></td></tr></table></figure><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>The you can open your favorite browser, type <code>http://127.0.0.1:8000</code> , you will see your project’s index page.<br>Of course, what i do is very simple, you can config custom configure of your project.</p><h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><p><a href="http://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html" target="_blank" rel="noopener">django_and_nginx</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;version&quot;&gt;&lt;a href=&quot;#version&quot; class=&quot;headerlink&quot; title=&quot;version&quot;&gt;&lt;/a&gt;version&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;django version:1.6&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="django" scheme="http://orangleliu.info/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>django 单元测试小结</title>
    <link href="http://orangleliu.info/2016/10/09/django-unittest-summary/"/>
    <id>http://orangleliu.info/2016/10/09/django-unittest-summary/</id>
    <published>2016-10-09T11:23:27.000Z</published>
    <updated>2016-10-09T11:24:38.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>从前很少写单元测试了，特别是web应用。最近不知不觉喜欢起来这个事情了，发现单元测试对于软件的模块，正交性有很大促进作用，因为函数，模块写的不合理，单元测试写起来就麻烦的多呀。公司的项目一直都是用Django，所以写点django单元测试的小总结，记录为主，备查。</p></blockquote><h2 id="测试的场景"><a href="#测试的场景" class="headerlink" title="测试的场景"></a>测试的场景</h2><p>框架Django1.8 测试工具 unittest, 要记得给test设置一个独特的settings。</p><ol><li><p>测试请求 也就是测试整个view部分 <a href="https://docs.djangoproject.com/en/1.8/topics/testing/advanced/#example" target="_blank" rel="noopener">官方案例</a> 其中可能会遇到登录，或者时session怎么模拟的问题</p></li><li><p>测试带有orm的模块</p></li><li>需要mock的测试，比较多的情况是有第三方API调用, 发邮件，发短信这种</li></ol><p>unittest提供的断言种类挺多,但是经常用的也就几个 <code>self.assertContains</code>, <code>self.assertEqual</code>, <code>self.assertTrue</code></p><p>顺便提下有用的选项(我这里是单独给测试写了一个settings), 为了提高测试速度，可以把用不到的中间件，installed_apps之类的多余配置给去掉。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">测试全部用例</span><br><span class="line">python manage<span class="selector-class">.py</span> test  --setting settings_test</span><br><span class="line"></span><br><span class="line">测试某个APP</span><br><span class="line">python manage<span class="selector-class">.py</span> test appname --setting settings_test</span><br><span class="line"></span><br><span class="line">测试某个app下的TeseCase类</span><br><span class="line">python manage<span class="selector-class">.py</span> test alarm<span class="selector-class">.tests</span><span class="selector-class">.ModelTestCase</span> --setting settings_test</span><br><span class="line"></span><br><span class="line">-v &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; 数字越大，显示的输出越详细，测试的日志信息</span><br><span class="line">python manage<span class="selector-class">.py</span> test --setting settings_test -v3</span><br><span class="line"></span><br><span class="line">其他的选项请查看 --help</span><br><span class="line">python manage<span class="selector-class">.py</span> test --help</span><br></pre></td></tr></table></figure><h3 id="用请求测试-views函数"><a href="#用请求测试-views函数" class="headerlink" title="用请求测试 views函数"></a>用请求测试 views函数</h3><p>DJANGO中提供了Client类来模拟http请求，可以模拟不同的method，然后就是请求参数的模拟，用起来很方面。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">from django.test import TestCase, Client</span><br><span class="line"></span><br><span class="line">from sendviews import *</span><br><span class="line">from core.tests import create_user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendviewsTestCase</span>(<span class="title">TestCase</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.user = create_user()</span><br><span class="line">        <span class="keyword">self</span>.device = Device(hostname=<span class="string">"CN-BJ-0000-00"</span>,</span><br><span class="line">                             mac=<span class="string">"ff:ff:ff:ff:ff:ff"</span>, user=<span class="keyword">self</span>.user).save()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_creat_sms</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        c = Client()</span><br><span class="line">        rep = c.post(<span class="string">"/acquireportal/createsms"</span>,&#123;<span class="string">"phone"</span>: <span class="string">"13988902345"</span>,</span><br><span class="line">                                                 <span class="string">"ssid"</span>: <span class="string">"erya"</span>,</span><br><span class="line">                                                 <span class="string">"dmac"</span>: <span class="string">"ff:ff:ff:ff:ff:ff"</span>&#125;)</span><br><span class="line">        <span class="comment"># 测试http请求的返回码是否正确</span></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(rep.status_code, <span class="number">200</span>)</span><br><span class="line">        <span class="comment"># 测试response的内容是否包含字符串</span></span><br><span class="line">        <span class="keyword">self</span>.assertContains(rep, <span class="string">"OK"</span>)</span><br><span class="line">        <span class="comment"># 测试response的内容是否包含字符串 方法二</span></span><br><span class="line">        <span class="keyword">self</span>.assertTrue(<span class="string">'OK'</span> <span class="keyword">in</span> rep.content)</span><br></pre></td></tr></table></figure><ul><li>使用 RequestFactory 对象来进行测试，不是从 http client来发起，某些情况会用到</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase, RequestFactory</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> util.sign <span class="keyword">import</span> generate_sign, validate_sign</span><br><span class="line"><span class="keyword">from</span> util.decorators <span class="keyword">import</span> apiauth_required, SIGN_KEY</span><br><span class="line"></span><br><span class="line"><span class="meta">@apiauth_required()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simpleapi</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoratorsTestCase</span><span class="params">(TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.factory = RequestFactory()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_apiauth</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># create request object</span></span><br><span class="line">        key = SIGN_KEY</span><br><span class="line">        query_string = &#123;<span class="string">u"name"</span>: <span class="string">u"lzz"</span>, <span class="string">u"age"</span>: <span class="string">u"20"</span>, <span class="string">u"data"</span>: <span class="string">u"[python, java, golang, lua]"</span>&#125;</span><br><span class="line">        token = generate_sign(query_string, key)</span><br><span class="line">        query_string.update(&#123;<span class="string">u"sign"</span>: token&#125;)</span><br><span class="line">        req = self.factory.post(<span class="string">"/api/test"</span>, data=query_string)</span><br><span class="line">        response = simpleapi(req)</span><br><span class="line">        self.assertEqual(response.status_code, <span class="number">200</span>)</span><br></pre></td></tr></table></figure><ul><li>HTML 文本测试，使用 constants 来判断并不是个好的选择，可以用render之后的字符串对比。</li></ul><p>对于需要登陆的view，有client也比较容易操作，还有一些特殊的session的检测等, 我这里做了一个简单的封装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_client</span><span class="params">(user)</span>:</span></span><br><span class="line">    client = Client()</span><br><span class="line">    client.login(username=user.username, password=<span class="string">"lzz"</span>)</span><br><span class="line">    s = client.session</span><br><span class="line">    s[<span class="string">'cur_user_id'</span>] = user.id</span><br><span class="line">    s.save()</span><br><span class="line">    <span class="keyword">return</span> client</span><br></pre></td></tr></table></figure><h3 id="带有mock的测试"><a href="#带有mock的测试" class="headerlink" title="带有mock的测试"></a>带有mock的测试</h3><p>对模块中的方法mock或者是对一个对象中的方法进行mock。真对测试函数中一些无法直接测试的函数设置默认的返回值, py3标准库中已经有了<a href="https://docs.python.org/3/library/unittest.mock.html" target="_blank" rel="noopener">mock模块</a>，py2需要自己安装, 推荐教程 <a href="http://www.oschina.net/translate/unit-testing-with-the-python-mock-class" target="_blank" rel="noopener">使用Pyhton Mock进行单元测试1</a>。 下面是个实际的代码片段。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mock</span><br><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"><span class="keyword">from</span> core.models <span class="keyword">import</span> Tenant</span><br><span class="line"><span class="keyword">from</span> alarm.models <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> .controler <span class="keyword">import</span> TenantAlarm</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelTestCase</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.tenant = Tenant.objects.create(domainname=<span class="string">"erya"</span>, comname=<span class="string">u"尔雅"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @mock.patch.object(TenantAlarm, "sendAlarm")</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_record_alarm</span><span class="params">(self, mock_method)</span>:</span></span><br><span class="line">        <span class="comment"># record_alarm 这个中会调用sendAlarm方法</span></span><br><span class="line">        mock_method.return_value = <span class="keyword">None</span></span><br><span class="line">        content = <span class="string">"ccccc"</span></span><br><span class="line">        atype = <span class="number">0</span></span><br><span class="line">        rec_uid = <span class="number">0</span></span><br><span class="line">        Alarm().record_alarm(content=content, atype=<span class="number">0</span>,</span><br><span class="line">                             rec_tid=self.tenant.id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TenantAlarmTestCase</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.tenant = Tenant.objects.create(domainname=<span class="string">"erya"</span>, comname=<span class="string">u"尔雅"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @mock.patch.object(TenantAlarm, "sendSMS", return_value=None)</span></span><br><span class="line"><span class="meta">    @mock.patch.object(TenantAlarm, "sendEmail", return_value=None)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_send_alarm</span><span class="params">(self, method1, method2)</span>:</span></span><br><span class="line">        content = <span class="string">u"报警了"</span></span><br><span class="line">        ta = TenantAlarm(self.tenant.id, content, &#123;<span class="string">u'SMS'</span>: <span class="number">0</span>, <span class="string">u'EMAIL'</span>: <span class="number">0</span>&#125;)</span><br><span class="line">        ta.sendAlarm()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @mock.patch('util.sendsms_com.send', return_value=1)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_sendsms</span><span class="params">(self, send)</span>:</span></span><br><span class="line">        ta = TenantAlarm(self.tenant.id, self.content, &#123;<span class="string">u'SMS'</span>: <span class="number">0</span>, <span class="string">u'EMAIL'</span>: <span class="number">0</span>&#125;)</span><br><span class="line">        ta.sendSMS()</span><br><span class="line">        self.assertEqual(<span class="number">0</span>, Account.objects.get(tenant=self.tenant).sms_num)</span><br><span class="line">        self.account.sms_num = <span class="number">100</span></span><br><span class="line">        self.account.save()</span><br><span class="line">        ta.sendSMS()</span><br><span class="line">        self.assertEqual(<span class="number">99</span>, Account.objects.get(tenant=self.tenant).sms_num)</span><br></pre></td></tr></table></figure><h2 id="coverage"><a href="#coverage" class="headerlink" title="coverage"></a>coverage</h2><p>coverage是一个检查单元测试覆盖率的工具，django的文档中也有简要的说明coverage的集成 <a href="https://docs.djangoproject.com/en/1.8/topics/testing/advanced/#integration-with-coverage-py" target="_blank" rel="noopener">文档地址</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#测试并收集测试信息</span></span><br><span class="line">coverage run --<span class="built_in">source</span>=<span class="string">'.'</span> manage.py <span class="built_in">test</span> --setting mandela.settings_test</span><br><span class="line"><span class="comment">#查看测试结果</span></span><br><span class="line">coverage report -m</span><br><span class="line">Name                                                       Stmts   Miss  Cover   Missing</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line">acquireportal/__init__.py                                      0      0   100%</span><br><span class="line">acquireportal/controler.py                                    65     47    28%   22-56, 60-71, 76-79</span><br><span class="line">acquireportal/migrations/0001_initial.py                       6      0   100%</span><br><span class="line">acquireportal/migrations/0002_auto_20160622_1059.py            6      0   100%</span><br><span class="line">acquireportal/migrations/0003_auto_20160622_1100.py            5      0   100%</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line">TOTAL                                                       8013   5858    27%</span><br></pre></td></tr></table></figure><p>覆盖率挺低的😉</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;从前很少写单元测试了，特别是web应用。最近不知不觉喜欢起来这个事情了，发现单元测试对于软件的模块，正交性有很大促进作用，因为函数，模块写的不合理，单元测试写起来就麻烦的多呀。公司的项目一直都是用Django，所
      
    
    </summary>
    
      <category term="技术分享" scheme="http://orangleliu.info/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="django" scheme="http://orangleliu.info/tags/django/"/>
    
      <category term="test" scheme="http://orangleliu.info/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>OpenResty中安装和使用LJSQlite3</title>
    <link href="http://orangleliu.info/2016/09/27/openresty-sqlite-install-and-use/"/>
    <id>http://orangleliu.info/2016/09/27/openresty-sqlite-install-and-use/</id>
    <published>2016-09-27T10:34:15.000Z</published>
    <updated>2016-09-27T15:26:29.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>尽管Openresty和sqlite结合并不是好的选择，sqlite的阻塞会导致nginx整体性能的极速下降，但是总有些小应用，也不需要高性能，就是为了展示点东西，nginx+lua 一并做了。 性能有要求场景下请不要那么玩，然后在网上找到了<a href="http://scilua.org/ljsqlite3.html" target="_blank" rel="noopener">LJSQlite3</a>这么一个库，正好是基于cffi的，不错。</p></blockquote><ul><li><a href="https://github.com/stepelu/lua-ljsqlite3" target="_blank" rel="noopener">ljsqlite3 on github</a></li><li><a href="http://scilua.org/ljsqlite3.html" target="_blank" rel="noopener">ljsqlite3 doc</a></li></ul><p>具体的操作和测试代码都放在下面了</p><p>nginx conf</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">location</span> <span class="title">/sqlite</span> &#123;</span><br><span class="line">    content_by_lua_file conf/lua/sqlitetest.lua;</span><br><span class="line">    <span class="comment"># curl 'http://127.0.0.1:8008/sqlite'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sqlitetest.lua<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ljsqlite3 测试使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 安装的步骤</span></span><br><span class="line"><span class="comment">-- ljsqlite3 基于luajit cffi写的，所以首先要安装sqlite在机器上, lua-xsys是它的依赖库</span></span><br><span class="line"><span class="comment">-- cd usr/local/openresty/lualib</span></span><br><span class="line"><span class="comment">-- git clone https://github.com/stepelu/lua-xsys.git &amp;&amp; mv lua-xsys xsys</span></span><br><span class="line"><span class="comment">-- git clone https://github.com/stepelu/lua-ljsqlite3.git &amp;&amp; mv lua-ljsqlite3 ljsqlite3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> sql = <span class="built_in">require</span> <span class="string">'ljsqlite3'</span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">string</span> = <span class="built_in">string</span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">unpack</span> = <span class="built_in">unpack</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Open a temporary in-memory database, when conn is closed, database is not exist</span></span><br><span class="line"><span class="comment">-- when the request end, then database is also not exit, so think twice</span></span><br><span class="line"><span class="comment">-- local conn = sql.open("")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- use a db file, rwc mean if the file not exits, create it</span></span><br><span class="line"><span class="comment">-- please notice permission of dir and file</span></span><br><span class="line"><span class="keyword">local</span> conn = sql.<span class="built_in">open</span>(<span class="string">"/tmp/test.db"</span>, <span class="string">'rwc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">create_table</span><span class="params">(conn)</span></span></span><br><span class="line">    <span class="comment">-- create a table, insert into a record</span></span><br><span class="line">    <span class="comment">--</span></span><br><span class="line">    conn:exec(<span class="string">[[</span></span><br><span class="line"><span class="string">    DROP TABLE IF EXISTS t;</span></span><br><span class="line"><span class="string">    CREATE TABLE t(id TEXT, num REAL);</span></span><br><span class="line"><span class="string">    ]]</span>)</span><br><span class="line">    ngx.say(<span class="string">"create table t ok"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">insert_record</span><span class="params">(conn, id, num)</span></span></span><br><span class="line">    <span class="keyword">local</span> sqlstr = <span class="string">"INSERT INTO t VALUES('"</span>..id..<span class="string">"', "</span>..num..<span class="string">");"</span></span><br><span class="line">    <span class="keyword">local</span> res, nrow = conn:exec(sqlstr)</span><br><span class="line">    <span class="comment">-- if success res is nil and nrow is 0</span></span><br><span class="line">    <span class="keyword">if</span> nrow == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        ngx.say(<span class="string">"insert ok"</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ngx.say(<span class="string">"insert failure"</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">show_record</span><span class="params">(conn, id)</span></span></span><br><span class="line">    <span class="keyword">local</span> sqlstr = <span class="string">"SELECT * FROM t WHERE id=='"</span>..id..<span class="string">"'"</span></span><br><span class="line">    <span class="keyword">local</span> id, num = conn:rowexec(sqlstr)</span><br><span class="line">    <span class="comment">-- if multiple records returned, error</span></span><br><span class="line">    ngx.say(<span class="string">"id:"</span>..<span class="built_in">tostring</span>(id))</span><br><span class="line">    ngx.say(<span class="string">"num:"</span>..<span class="built_in">tostring</span>(num))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">all_record</span><span class="params">(conn)</span></span></span><br><span class="line">    <span class="keyword">local</span> stmt = conn:prepare(<span class="string">"SELECT * FROM t"</span>)</span><br><span class="line">    <span class="keyword">local</span> row, names = stmt:step(&#123;&#125;, &#123;&#125;)</span><br><span class="line">    <span class="keyword">while</span> stmt:step(row) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> id, num = <span class="built_in">unpack</span>(row)</span><br><span class="line">        ngx.say(<span class="string">"id:"</span>..id..<span class="string">" num:"</span>..num)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">update_record</span><span class="params">(conn, id, num)</span></span></span><br><span class="line">    <span class="keyword">local</span> sqlstr = <span class="string">"UPDATE t set num="</span>..num..<span class="string">" where id='"</span>..id..<span class="string">"';"</span></span><br><span class="line">    <span class="keyword">local</span> res, nrow = conn:exec(sqlstr)</span><br><span class="line">    ngx.say(res)</span><br><span class="line">    ngx.say(nrow)</span><br><span class="line">    ngx.say(<span class="string">"update ok"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">remove_record</span><span class="params">(conn, id)</span></span></span><br><span class="line">    <span class="comment">-- 这种写法比较适合多条语句</span></span><br><span class="line">    <span class="keyword">local</span> stmt = conn:prepare(<span class="string">"delete from t where id=?"</span>)</span><br><span class="line">    stmt:reset():bind(id):step()</span><br><span class="line">    ngx.say(<span class="string">"remove ok"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解析 op 和 参数，然后操作，主要熟悉api，并没有rest的风格。。。</span></span><br><span class="line"><span class="comment">-- sql 也就直接拼接了</span></span><br><span class="line"><span class="comment">-- curl 'http://127.0.0.1:8008/sqlite?op=xxx&amp;id=xx&amp;num=xx'</span></span><br><span class="line"><span class="keyword">local</span> op = ngx.var.arg_op</span><br><span class="line"><span class="keyword">local</span> id = ngx.var.arg_id</span><br><span class="line"><span class="keyword">local</span> num = ngx.var.arg_num</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> op == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">    ngx.<span class="built_in">exit</span>(<span class="number">404</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> op == <span class="string">'create'</span> <span class="keyword">then</span></span><br><span class="line">    create_table(conn)</span><br><span class="line"><span class="keyword">elseif</span> op == <span class="string">"insert"</span> <span class="keyword">then</span></span><br><span class="line">    insert_record(conn, id, num)</span><br><span class="line"><span class="keyword">elseif</span> op == <span class="string">"showone"</span> <span class="keyword">then</span></span><br><span class="line">    show_record(conn, id)</span><br><span class="line"><span class="keyword">elseif</span> op == <span class="string">"showall"</span> <span class="keyword">then</span></span><br><span class="line">    all_record(conn)</span><br><span class="line"><span class="keyword">elseif</span> op == <span class="string">"update"</span> <span class="keyword">then</span></span><br><span class="line">    update_record(conn, id, num)</span><br><span class="line"><span class="keyword">elseif</span> op == <span class="string">"remove"</span> <span class="keyword">then</span></span><br><span class="line">    remove_record(conn, id)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">conn:<span class="built_in">close</span>()</span><br><span class="line">ngx.<span class="built_in">exit</span>(<span class="number">200</span>)</span><br></pre></td></tr></table></figure></p><p>sqlitetest.lua的api不是针对openresty，如果想要在openresty中真正的使用，还要做一些封装等工作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;尽管Openresty和sqlite结合并不是好的选择，sqlite的阻塞会导致nginx整体性能的极速下降，但是总有些小应用，也不需要高性能，就是为了展示点东西，nginx+lua 一并做了。 性能有要求场景下
      
    
    </summary>
    
      <category term="openresty" scheme="http://orangleliu.info/categories/openresty/"/>
    
    
      <category term="openresty" scheme="http://orangleliu.info/tags/openresty/"/>
    
      <category term="sqlite3" scheme="http://orangleliu.info/tags/sqlite3/"/>
    
  </entry>
  
  <entry>
    <title>Sweet Nginx-根据User Agent或者url特征阻止请求</title>
    <link href="http://orangleliu.info/2016/09/25/sweet-nginx-forbidden-request-by-ua/"/>
    <id>http://orangleliu.info/2016/09/25/sweet-nginx-forbidden-request-by-ua/</id>
    <published>2016-09-25T10:53:17.000Z</published>
    <updated>2016-09-25T10:56:25.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>有时候为了解决一些安全问题需要禁止某些特定的请求，例如根据user angent来阻止垃圾请求，百度爬虫这种，或者是其他的恶意请求，还有例如根据url的特征阻止某些请求，类似的有sql注入等。如果需求比较简单，直接使用nginx配置就能解决，如果需要比较专业的应用防火墙请使用专业的waf，像libmodsec 或者 naxsi。</p></blockquote><p>下面主要以禁止UA作为例子</p><h2 id="使用if"><a href="#使用if" class="headerlink" title="使用if"></a>使用if</h2><p>nginx中的if也是做流程判断，if增强了nginx的灵活性。if会有一些坑, 请参考 <a href="https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/" target="_blank" rel="noopener">If Is Evil</a></p><p>下面是配置片段<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"><span class="built_in">..</span>.</span><br><span class="line">location ~ /ifua &#123;</span><br><span class="line"></span><br><span class="line">        # 设定一个标志</span><br><span class="line">        <span class="builtin-name">set</span> <span class="variable">$block_user_agents</span> 0;</span><br><span class="line">        # 对ua进行判断</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ <span class="string">"curl"</span>) &#123;</span><br><span class="line">           <span class="builtin-name">set</span> <span class="variable">$block_user_agents</span> 1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ <span class="string">"Go-Ahead-Got-It"</span>) &#123;</span><br><span class="line">           <span class="builtin-name">set</span> <span class="variable">$block_user_agents</span> 1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ <span class="string">"TurnitinBot"</span>) &#123;</span><br><span class="line">           <span class="builtin-name">set</span> <span class="variable">$block_user_agents</span> 1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ <span class="string">"GrabNet"</span>) &#123;</span><br><span class="line">           <span class="builtin-name">set</span> <span class="variable">$block_user_agents</span> 1;</span><br><span class="line">        &#125;</span><br><span class="line">        # 对判断结果进行处理</span><br><span class="line">        # 每个请求都会对所有规则进行判断，如果每次判断直接return 403更好</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$block_user_agents</span> = 1) &#123;</span><br><span class="line">            return 403;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 或者这么写</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~* (QQMusic|Agoo-sdk-2.0|anclient|QQGame|kwai-android))&#123;</span><br><span class="line">            return 403;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # SQL注入的规则可以这么写</span><br><span class="line">        <span class="builtin-name">set</span> <span class="variable">$block_sql_injections</span> 0;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"union.*select.*\("</span>) &#123;</span><br><span class="line">            <span class="builtin-name">set</span> <span class="variable">$block_sql_injections</span> 1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"union.*all.*select.*"</span>) &#123;</span><br><span class="line">            <span class="builtin-name">set</span> <span class="variable">$block_sql_injections</span> 1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"concat.*\("</span>) &#123;</span><br><span class="line">            <span class="builtin-name">set</span> <span class="variable">$block_sql_injections</span> 1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$block_sql_injections</span> = 1) &#123;</span><br><span class="line">            return 403;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return 200;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">..</span>.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用curl测试下, 测试使用的nginx是 1.9.x版本<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">liuzhizhi<span class="symbol">@lzz</span>-rmbp|nginx <span class="meta"># curl -H <span class="string">"User-Agent: chrome"</span> <span class="string">'http://127.0.0.1/ifua'</span> -i</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">liuzhizhi<span class="symbol">@lzz</span>-rmbp|nginx <span class="meta"># curl -H <span class="string">"User-Agent: curl"</span> <span class="string">'http://127.0.0.1/ifua'</span> -i</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">403</span> Forbidden</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">liuzhizhi<span class="symbol">@lzz</span>-rmbp|nginx <span class="meta"># curl -H <span class="string">"User-Agent: QQMusic"</span> <span class="string">'http://127.0.0.1/ifua'</span> -i</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">403</span> Forbidden</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">liuzhizhi<span class="symbol">@lzz</span>-rmbp|nginx <span class="meta"># curl -i -H <span class="string">"User-Agent: chrome"</span> <span class="string">'http://127.0.0.1/ifua?name=concat('</span></span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">403</span> Forbidden</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">liuzhizhi<span class="symbol">@lzz</span>-rmbp|nginx <span class="meta"># curl -i -H <span class="string">"User-Agent: chrome"</span> <span class="string">'http://127.0.0.1/ifua?name=lzz'</span></span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h2 id="使用map"><a href="#使用map" class="headerlink" title="使用map"></a>使用map</h2><p>map是一个映射的过程，符合某些条件就会映射为某一个值，感觉用map更加整洁一些。</p><p>我们可以把ua的规则放在一个单独的文件 useragent.rules, 在配置中就可以使用 <code>$badagent</code> 这个变量的值来判断ua是否匹配了。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">map <span class="variable">$http_user_agent</span> <span class="variable">$badagent</span> &#123;</span><br><span class="line">       <span class="built_in"> default </span>             0;</span><br><span class="line">        ~curl                1;</span><br><span class="line">        ~Go-Ahead-Got-It     1;</span><br><span class="line">        ~TurnitinBot         1;</span><br><span class="line">        ~GrabNet             1;</span><br><span class="line">        ~*(QQMusic|Agoo-sdk-2.0|anclient|QQGame|kwai-android) 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>nginx配置，注意include的位置。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line"><span class="built_in">..</span>.</span><br><span class="line">    # map只能在http块中声明</span><br><span class="line">    include useragent.rules;</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> server </span>&#123;</span><br><span class="line">        <span class="built_in">..</span>.</span><br><span class="line">        location ~ /mapua &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$badagent</span>)&#123;</span><br><span class="line">                return 403;</span><br><span class="line">            &#125;</span><br><span class="line">        return 200;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用curl 带上不同的ua测试<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">liuzhizhi<span class="symbol">@lzz</span>-rmbp|nginx <span class="meta"># curl -i -H <span class="string">"User-Agent: chrome"</span> <span class="string">'http://127.0.0.1/mapua'</span></span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">liuzhizhi<span class="symbol">@lzz</span>-rmbp|nginx <span class="meta"># curl -i -H <span class="string">"User-Agent: curl"</span> <span class="string">'http://127.0.0.1/mapua'</span></span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">403</span> Forbidden</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">liuzhizhi<span class="symbol">@lzz</span>-rmbp|nginx <span class="meta"># curl -i -H <span class="string">"User-Agent: QQMusic"</span> <span class="string">'http://127.0.0.1/mapua'</span></span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">403</span> Forbidden</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>用map这种方式看起来更整洁，个人比较喜欢。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>nginx论坛上曾有人讨论过这两种方式的性能如何 <a href="https://forum.nginx.org/read.php?2,269808,269811#msg-269811" target="_blank" rel="noopener">Re: performance hit in using too many if’s</a>, 意思是说使用map更高效一些，我自己测试下来发现几乎差不多。</p><p>不光是ua和query string这两个变量，对于nginx其他的变量也可以那么操作，例如ip地址，特定的header都可以用类似的方式灵活的阻止访问，保护我们的服务器。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/" target="_blank" rel="noopener">If Is Evil</a> 最早是春哥提出来的</li><li><a href="http://nginx.org/en/docs/http/ngx_http_map_module.html" target="_blank" rel="noopener">nginx map文档</a></li><li><a href="https://www.howtoforge.com/nginx-how-to-block-exploits-sql-injections-file-injections-spam-user-agents-etc" target="_blank" rel="noopener">nginx: How To Block Exploits, SQL Injections, File Injections, Spam, User Agents, Etc</a></li><li><a href="http://ask.xmodulo.com/block-specific-user-agents-nginx-web-server.html" target="_blank" rel="noopener">How to block specific user agents on nginx web server</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;有时候为了解决一些安全问题需要禁止某些特定的请求，例如根据user angent来阻止垃圾请求，百度爬虫这种，或者是其他的恶意请求，还有例如根据url的特征阻止某些请求，类似的有sql注入等。如果需求比较简单，直
      
    
    </summary>
    
      <category term="技术分享" scheme="http://orangleliu.info/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
      <category term="openresty" scheme="http://orangleliu.info/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/openresty/"/>
    
    
      <category term="nginx" scheme="http://orangleliu.info/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>OpenResty查询Linux VPS主机流量</title>
    <link href="http://orangleliu.info/2016/09/23/openresty-get-vps-netflow/"/>
    <id>http://orangleliu.info/2016/09/23/openresty-get-vps-netflow/</id>
    <published>2016-09-23T10:52:36.000Z</published>
    <updated>2016-09-23T10:59:42.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>事情是这样的，我买了vps，每个月流量不是很多，我就想看看用了多少流量。但是我又不想去主机的后台查，我还不想用那些监控软件，优点小题大做了，于是我就想弄个脚本，然后openresty读出来，我没事看眼。</p></blockquote><h2 id="获取流量数据"><a href="#获取流量数据" class="headerlink" title="获取流量数据"></a>获取流量数据</h2><p>vps的操作系统是Centos6，用shell命令或者是读取某个文件获取</p><p>可以读下面两个文件，venet0是网卡名<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@CT1391 ~]# cat <span class="regexp">/sys/</span><span class="keyword">class</span><span class="regexp">/net/</span>venet0<span class="regexp">/statistics/</span>rx_bytes</span><br><span class="line"><span class="number">2300558468</span></span><br><span class="line">[root@CT1391 ~]# cat <span class="regexp">/sys/</span><span class="keyword">class</span><span class="regexp">/net/</span>venet0<span class="regexp">/statistics/</span>tx_bytes</span><br><span class="line"><span class="number">2111210364</span></span><br></pre></td></tr></table></figure></p><p>在lua中我们就可以直接读取文件并得到网卡的流量值了，剩下的就是格式化并输出就好了。</p><h2 id="lua脚本"><a href="#lua脚本" class="headerlink" title="lua脚本"></a>lua脚本</h2><p>lua读取网卡数据并显示，还需要一个每月清零的动作（一般都是重启网卡，没有找到其他法子，麻烦点的方法就是每个月初记录下来，自己计算当月)。</p><p>nginx配置部分<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">lua_code_cache</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /status &#123;</span><br><span class="line"><span class="attribute">default_type</span> text/html;</span><br><span class="line"><span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line"><span class="attribute">content_by_lua_file</span> /etc/nginx/lua/tstatus.lua;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>部署的时候记得把 <code>lua_code_cache</code> 开启了。</p><p>tstatus.lua</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">io</span> = <span class="built_in">require</span> <span class="string">"io"</span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">math</span> = <span class="built_in">require</span> <span class="string">"math"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 改成自己的网卡和总量</span></span><br><span class="line"><span class="keyword">local</span> fname = <span class="string">"eth2"</span></span><br><span class="line"><span class="keyword">local</span> month_flow = <span class="string">"250G"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">get_value</span><span class="params">(v)</span></span></span><br><span class="line"><span class="keyword">local</span> file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"/sys/class/net/"</span>..fname..<span class="string">"/statistics/"</span>..v..<span class="string">"_bytes"</span>)</span><br><span class="line"><span class="keyword">local</span> value = file:<span class="built_in">read</span>()</span><br><span class="line">file:<span class="built_in">close</span>()</span><br><span class="line"><span class="keyword">return</span> value</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">round</span><span class="params">(num, dip)</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">tonumber</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%."</span>..(dip <span class="keyword">or</span> <span class="number">0</span>)..<span class="string">"f"</span>, num))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">flow_format</span><span class="params">(v)</span></span></span><br><span class="line"><span class="keyword">local</span> v = <span class="built_in">tonumber</span>(v)</span><br><span class="line"><span class="keyword">if</span> v &lt; <span class="number">1024</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">return</span> v..<span class="string">"byte"</span></span><br><span class="line"><span class="keyword">elseif</span> v &lt; <span class="number">1024</span>*<span class="number">1024</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">return</span> round(v/<span class="number">1024.0</span>, <span class="number">2</span>)..<span class="string">"Kb"</span></span><br><span class="line"><span class="keyword">elseif</span> v &lt; <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">return</span> round(v/<span class="number">1024.0</span>/<span class="number">1024.0</span>, <span class="number">2</span>)..<span class="string">"M"</span></span><br><span class="line"><span class="keyword">elseif</span> v &lt; <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">return</span> round(v/<span class="number">1024.0</span>/<span class="number">1024.0</span>/<span class="number">1024.0</span>, <span class="number">2</span>)..<span class="string">"G"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> rx = get_value(<span class="string">"rx"</span>)</span><br><span class="line"><span class="keyword">local</span> tx = get_value(<span class="string">"tx"</span>)</span><br><span class="line"><span class="keyword">local</span> total = rx + tx</span><br><span class="line"></span><br><span class="line">ngx.say(<span class="string">"您本月可用的总流量是"</span>..month_flow..<span class="string">"&lt;br&gt;"</span>)</span><br><span class="line">ngx.say(<span class="string">"RX:"</span>..rx..<span class="string">" -&gt; "</span>..flow_format(rx)..<span class="string">"&lt;br&gt;"</span>)</span><br><span class="line">ngx.say(<span class="string">"TX:"</span>..tx..<span class="string">" -&gt; "</span>..flow_format(tx)..<span class="string">"&lt;br&gt;"</span>)</span><br><span class="line">ngx.say(<span class="string">"Total:"</span>..total..<span class="string">" -&gt; "</span>..flow_format(total))</span><br><span class="line">ngx.<span class="built_in">exit</span>(<span class="number">200</span>)</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>用curl测试，在浏览器中也是可以正常使用的哈，如果想要看起来高大上，可以弄一个饼图或者是仪表盘，然后用json获取流量值就行了。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@orangleliu lzz]<span class="meta"># curl http:<span class="comment">//192.168.59.104/status</span></span></span><br><span class="line">您本月可用的总流量是<span class="number">250</span>G<span class="params">&lt;br&gt;</span></span><br><span class="line"><span class="symbol">RX:</span><span class="number">3412800496</span> -&gt; <span class="number">3.18</span>G<span class="params">&lt;br&gt;</span></span><br><span class="line"><span class="symbol">TX:</span><span class="number">61802720</span> -&gt; <span class="number">58.94</span>M<span class="params">&lt;br&gt;</span></span><br><span class="line"><span class="symbol">Total:</span><span class="number">3474603216</span> -&gt; <span class="number">3.24</span>G</span><br></pre></td></tr></table></figure><p>先这么着，下个月1号先把累计的流量记录下来，弄个持久化和计算当月的流程吧。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;事情是这样的，我买了vps，每个月流量不是很多，我就想看看用了多少流量。但是我又不想去主机的后台查，我还不想用那些监控软件，优点小题大做了，于是我就想弄个脚本，然后openresty读出来，我没事看眼。&lt;/p&gt;

      
    
    </summary>
    
      <category term="Linux" scheme="http://orangleliu.info/categories/Linux/"/>
    
      <category term="折腾" scheme="http://orangleliu.info/categories/Linux/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="openresty" scheme="http://orangleliu.info/tags/openresty/"/>
    
      <category term="vps" scheme="http://orangleliu.info/tags/vps/"/>
    
  </entry>
  
  <entry>
    <title>Openwrt中利用iptables实现流量监控和portal的原理</title>
    <link href="http://orangleliu.info/2016/09/23/openwrt-iptables-using/"/>
    <id>http://orangleliu.info/2016/09/23/openwrt-iptables-using/</id>
    <published>2016-09-23T10:24:51.000Z</published>
    <updated>2016-09-23T10:42:03.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>openwrt上需要开发一些功能，中间用到的一些iptables相关的知识的整理，希望对需要实现wifi portal功能或者是流量监控的朋友可以有些启发</p></blockquote><h2 id="流量监控"><a href="#流量监控" class="headerlink" title="流量监控"></a>流量监控</h2><p>针对每个mac来统计流量的使用情况，如果需求是统计每天的总流量这种，还需要对每次取得的结果进行持久化。可以参考  <a href="https://github.com/pyrovski/wrtbwmon" target="_blank" rel="noopener">wrtbwmon</a> 这个脚本来做数据收集。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">openwrt监控某个ip</span><br><span class="line">添加一个新的iptables chain</span><br><span class="line">iptables -N P45</span><br><span class="line"></span><br><span class="line">往刚才建的P45和delegate_forward添加rules，ip换成你想监控的</span><br><span class="line">iptables -I P45 -s <span class="number">192.168</span><span class="number">.111</span><span class="number">.115</span> -j ACCEPT</span><br><span class="line">iptables -I P45 -d <span class="number">192.168</span><span class="number">.111</span><span class="number">.115</span> -j ACCEPT</span><br><span class="line">iptables -I forwarding_rule -s <span class="number">192.168</span><span class="number">.111</span><span class="number">.115</span> -j P45</span><br><span class="line">iptables -I forwarding_rule -d <span class="number">192.168</span><span class="number">.111</span><span class="number">.115</span> -j P45</span><br><span class="line"></span><br><span class="line">-I 代表chain</span><br><span class="line">-s source</span><br><span class="line">-d destination</span><br><span class="line">-j 如果符合就</span><br><span class="line"></span><br><span class="line"># iptables -nvL forwarding_rule|grep <span class="number">192.168</span><span class="number">.111</span><span class="number">.115</span></span><br><span class="line"><span class="number">19657</span>   <span class="number">20</span>M P45        all  --  *      *       <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>            <span class="number">192.168</span><span class="number">.111</span><span class="number">.115</span></span><br><span class="line"><span class="number">20214</span> <span class="number">2172</span>K P45        all  --  *      *       <span class="number">192.168</span><span class="number">.111</span><span class="number">.115</span>      <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span></span><br><span class="line"></span><br><span class="line">-n 显示端口号</span><br><span class="line">-L 规则</span><br><span class="line">-v 显示计数</span><br></pre></td></tr></table></figure><p>监控本机某个IP和端口，经常做本机的某些应用的流量统计</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -d <span class="number">45.78</span><span class="number">.37</span><span class="number">.246</span> -p tcp --dport <span class="number">9999</span></span><br><span class="line">iptables -I OUTPUT -s <span class="number">45.78</span><span class="number">.37</span><span class="number">.246</span> -p tcp --sport <span class="number">9999</span></span><br><span class="line"></span><br><span class="line">iptables -I INPUT -d <span class="number">45.78</span><span class="number">.37</span><span class="number">.246</span></span><br><span class="line">iptables -I OUTPUT -s <span class="number">45.78</span><span class="number">.37</span><span class="number">.246</span></span><br><span class="line"></span><br><span class="line">iptables -nvL</span><br><span class="line"></span><br><span class="line">删除不需要的链</span><br><span class="line">iptables -n -L -v --line-numbers</span><br><span class="line">iptables -D INPUT <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h2><p>非转发<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">禁止某个<span class="selector-tag">MAC</span></span><br><span class="line"><span class="selector-tag">iptables</span> <span class="selector-tag">-A</span> <span class="selector-tag">INPUT</span> <span class="selector-tag">-m</span> <span class="selector-tag">mac</span> <span class="selector-tag">--mac-source</span> 00<span class="selector-pseudo">:0F</span><span class="selector-pseudo">:EA</span><span class="selector-pseudo">:91</span><span class="selector-pseudo">:04</span><span class="selector-pseudo">:08</span> <span class="selector-tag">-j</span> <span class="selector-tag">DROP</span></span><br><span class="line"></span><br><span class="line">只让某个<span class="selector-tag">mac</span>访问某个端口</span><br><span class="line"><span class="selector-tag">iptables</span> <span class="selector-tag">-A</span> <span class="selector-tag">INPUT</span> <span class="selector-tag">-p</span> <span class="selector-tag">tcp</span> <span class="selector-tag">--destination-port</span> 22 <span class="selector-tag">-m</span> <span class="selector-tag">mac</span> <span class="selector-tag">--mac-source</span> 00<span class="selector-pseudo">:0F</span><span class="selector-pseudo">:EA</span><span class="selector-pseudo">:91</span><span class="selector-pseudo">:04</span><span class="selector-pseudo">:07</span> <span class="selector-tag">-j</span> <span class="selector-tag">ACCEPT</span></span><br></pre></td></tr></table></figure></p><h3 id="WIFI-Portal-认证原理-iptables部分"><a href="#WIFI-Portal-认证原理-iptables部分" class="headerlink" title="WIFI Portal 认证原理 iptables部分"></a>WIFI Portal 认证原理 iptables部分</h3><p>OpenWrt 认证使用 Wifidog类似，终端连接上来之后真对http协议的请求进行重定向到路由的portal服务器，后面就是认证的流程，当认证完成之后就可以真对某个mac地址进行放行。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">还没认证</span><br><span class="line">iptables -F forwarding_rule</span><br><span class="line">iptables -t<span class="built_in"> nat </span>-F prerouting_rule</span><br><span class="line">iptables -I forwarding_rule -s 192.168.111.0/24 -j DROP</span><br><span class="line">iptables -t<span class="built_in"> nat </span>-I prerouting_rule -p tcp -s 192.168.111.0/24 --dport 80 -j DNAT --to 192.168.111.1:81</span><br><span class="line"></span><br><span class="line">白名单（终端没有认证之前可以访问的网站)</span><br><span class="line">iptables -I forwarding_rule -d 115.29.23.45 -j ACCEPT</span><br><span class="line">iptables -t<span class="built_in"> nat </span>-I prerouting_rule -p tcp -d 115.29.23.45 --dport 80 -j ACCEPT</span><br><span class="line">iptables -I forwarding_rule -d mapi.alipay.com -j ACCEPT</span><br><span class="line">iptables -t<span class="built_in"> nat </span>-I prerouting_rule -p tcp -d mapi.alipay.com --dport 80 -j ACCEPT</span><br><span class="line"></span><br><span class="line">开启某个MAC上网</span><br><span class="line">iptables -I forwarding_rule -m mac --mac-source a4:5e:60:cd:b3:d9 -j ACCEPT</span><br><span class="line">iptables -t<span class="built_in"> nat </span>-I prerouting_rule -p tcp -m mac --mac-source a4:5e:60:cd:b3:d9 --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure></p><ul><li>why new chain?</li><li>-d domaian, how handler? 对于白名单使用域名，iptables会自动查询dns然后转换成ip，然后加入到规则中</li><li>为什么还要nat呢？<ul><li>nat是为了让80端口http，重定向到portal</li></ul></li><li><p>多个dport怎么办?</p><ul><li><p>有个 -m –dports 选项</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp  --match multiport --dports <span class="number">110</span>,<span class="number">143</span>,<span class="number">993</span>,<span class="number">995</span> -j ACCEPT</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="http://www.right.com.cn/forum/thread-181287-1-1.html" target="_blank" rel="noopener">发个openwrt下基于iptables的Luci图形ip流量监控教程</a></li><li><a href="http://zhensheng.im/2014/04/27/2212/MIAO_LE_GE_MI" target="_blank" rel="noopener">iptables流量统计</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;openwrt上需要开发一些功能，中间用到的一些iptables相关的知识的整理，希望对需要实现wifi portal功能或者是流量监控的朋友可以有些启发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;流量
      
    
    </summary>
    
      <category term="Linux" scheme="http://orangleliu.info/categories/Linux/"/>
    
    
      <category term="openwrt" scheme="http://orangleliu.info/tags/openwrt/"/>
    
      <category term="iptables" scheme="http://orangleliu.info/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>利用github webhook 结合openresty自动更新静态博客</title>
    <link href="http://orangleliu.info/2016/09/19/github-webhooks-auto-deploy-static-blog/"/>
    <id>http://orangleliu.info/2016/09/19/github-webhooks-auto-deploy-static-blog/</id>
    <published>2016-09-19T05:26:04.000Z</published>
    <updated>2016-09-19T06:05:45.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>使用hexo在github pages上弄了一个静态博客，后来觉得访问有点慢，于是放到自己vps上。</p></blockquote><p>对于静态博客的部署非常简单，本来就是html，js，css等静态文件，只要nginx上配置下目录就可以正常访问了。 麻烦的是博客更新的时候，还要去vps上操作更新git pull操作，如果每次在本地commit之后，github仓库能够自动更新到vps上多好啊，于是就用到了webhook的功能。（这里静态文件的生成还是在本地，只是把生成好的静态文件push到github了，所以自动部署没有构建的环节)</p><h2 id="部署静态博客"><a href="#部署静态博客" class="headerlink" title="部署静态博客"></a>部署静态博客</h2><p>代码clone到vps上的目录，然后配置nginx</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in"> server </span>&#123;</span><br><span class="line">        listen      80;</span><br><span class="line">        server_name  xxx.<span class="builtin-name">info</span> ;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            alias  /www/orangle.github.io/;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意下权限问题 ，配置完成<code>reload nginx</code> 就能访问了。</p><h2 id="自动更新shell脚本"><a href="#自动更新shell脚本" class="headerlink" title="自动更新shell脚本"></a>自动更新shell脚本</h2><p>从github拉取代码，然后强制更新所有内容。</p><p>git_update.sh<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line">blog_dir=/path/to/git/repository</span><br><span class="line">git=/usr/bin/git</span><br><span class="line">branch=master</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$blog_dir</span></span><br><span class="line"><span class="variable">$git</span> reset --hard origin/<span class="variable">$branch</span></span><br><span class="line"><span class="variable">$git</span> clean -f</span><br><span class="line"><span class="variable">$git</span> pull</span><br><span class="line"></span><br><span class="line">dtime=`date`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"success <span class="variable">$dtime</span>"</span>  &gt; d.txt</span><br></pre></td></tr></table></figure></p><h2 id="配置webhook"><a href="#配置webhook" class="headerlink" title="配置webhook"></a>配置webhook</h2><p>在github上配置这个项目的webhook，然后在openresty中写一个http接口来出来每次github发来的 <code>push事件</code>。<br><a href="https://developer.github.com/webhooks/" target="_blank" rel="noopener">webhook的设置文档</a> ，这里设置成  <a href="http://xxx.info/hook" target="_blank" rel="noopener">http://xxx.info/hook</a></p><p>修改nginx配置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">     <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">     <span class="attribute">server_name</span>  xxx.<span class="literal">info</span> www.xxx.<span class="literal">info</span>;</span><br><span class="line">     <span class="attribute">lua_code_cache</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">     <span class="attribute">location</span> / &#123;</span><br><span class="line">         <span class="attribute">alias</span>  /www/orangle.github.io/;</span><br><span class="line">         <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="attribute">location</span> /hook &#123;</span><br><span class="line">         <span class="attribute">content_by_lua_file</span> /etc/nginx/hook.lua;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>lua脚本<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">local signature = ngx.req.get_headers()[<span class="string">"X-Hub-Signature"</span>]</span><br><span class="line">local key = <span class="string">"xxxxxx"</span> --github上配置的相同</span><br><span class="line"><span class="keyword">if</span> signature == nil then</span><br><span class="line">    return ngx.<span class="keyword">exit</span>(<span class="number">404</span>)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- 校验header</span><br><span class="line">ngx.req.read_body()</span><br><span class="line">local t = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> string.gmatch(signature, <span class="string">"(%w+)=(%w+)"</span>) <span class="keyword">do</span></span><br><span class="line">    t[k] = v</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local str = require <span class="string">"resty.string"</span></span><br><span class="line">local digest = ngx.hmac_sha1(key, ngx.req.get_body_data())</span><br><span class="line"><span class="keyword">if</span> not str.to_hex(digest) == t[<span class="string">"sha1"</span>] then</span><br><span class="line">    return ngx.<span class="keyword">exit</span>(<span class="number">404</span>)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- 执行更新</span><br><span class="line">os.execute(<span class="string">"bash /www/blog_update.sh"</span>);</span><br><span class="line">ngx.say(<span class="string">"OK"</span>)</span><br><span class="line">ngx.<span class="keyword">exit</span>(<span class="number">200</span>)</span><br></pre></td></tr></table></figure></p><p>注意！github发送的请求可能playload比较大，这时候 <code>ngx.req.get_body_data()</code> 就无法正常获取内容，可以通过调整 <code>client_body_buffer_size 100k;</code> 配置来解决</p><p><a href="http://blog.liaol.net/2015/06/use-github-webhooks-to-deploy-hexo/" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;使用hexo在github pages上弄了一个静态博客，后来觉得访问有点慢，于是放到自己vps上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于静态博客的部署非常简单，本来就是html，js，css等静态文件
      
    
    </summary>
    
      <category term="技术分享" scheme="http://orangleliu.info/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="github" scheme="http://orangleliu.info/tags/github/"/>
    
      <category term="git" scheme="http://orangleliu.info/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>数据结构－图</title>
    <link href="http://orangleliu.info/2016/07/13/learn-algorithm-graph/"/>
    <id>http://orangleliu.info/2016/07/13/learn-algorithm-graph/</id>
    <published>2016-07-13T06:47:56.000Z</published>
    <updated>2016-09-19T05:35:39.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>这里的<code>图</code>是数据结构的图，印象非常浅，所以挖挖坟，从感性认识开始。</p></blockquote><p>先从熟悉的想， <code>树</code>是图的一种，是一种无向图。从这里就可以想到图的区分，有向或者是无向，接着就会想到能不能形成回路的特性。尽量多的来看图，少看树。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><code>图</code> 是由定点的 <code>有穷非空集合</code>     和定点之间边的集合组成。通常的表示 G(V,E) G表示图，V是顶点集合，E是边的集合<ul><li>图中的点叫做 <code>顶点</code>，图中不能没有顶点</li><li>定点之间的关系由 <code>边</code> 来描述</li></ul></li><li><code>无向图</code> 任意两个顶点之间的边都是 没有方向之分的，该图成为 无向图。</li><li><code>有向图</code> 任意两个顶点之间的边都是有方向的，例如 <code>A-&gt;B</code>，该图成为 有向图。有向边也叫做 <code>弧</code></li><li><code>无向完全图</code> 在无向图中，如果任意两个顶点之间都存在边，称为无向完全图。 n个顶点求边 <code>n(n-1)/2</code></li><li><code>有向完全图</code> 在有向图中，如果任意两个顶点之间都存在方向互为相反的两个弧，该图称为有向完全图。 n个顶点求边 <code>n(n-1)</code></li><li><code>稀疏图</code> 和 <code>稠密图</code> 又很少边或者弧的图叫做稀疏图，反之称为稠密图，没有量化定义，相对而言。</li><li><code>权</code> 有些图的边或弧具有与它相关的数字，这种和边，弧相关的数叫做权，权可以表示两个顶点之间的距离或者耗费</li><li><code>网</code> 带权的图称为网</li></ul><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li><a href="https://www.zybuluo.com/guoxs/note/249812#数据结构之图" target="_blank" rel="noopener">数据结构之图</a> 写的非常详尽，没看完，感觉不错。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;这里的&lt;code&gt;图&lt;/code&gt;是数据结构的图，印象非常浅，所以挖挖坟，从感性认识开始。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先从熟悉的想， &lt;code&gt;树&lt;/code&gt;是图的一种，是一种无向图。从这里就
      
    
    </summary>
    
      <category term="数据结构" scheme="http://orangleliu.info/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="图" scheme="http://orangleliu.info/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>2016 暑假的阅读与生活</title>
    <link href="http://orangleliu.info/2016/07/06/reading-list-lzz-2016summer/"/>
    <id>http://orangleliu.info/2016/07/06/reading-list-lzz-2016summer/</id>
    <published>2016-07-06T10:26:52.000Z</published>
    <updated>2016-09-19T05:36:22.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>又是一年暑假，这个时间还是挺叫人高兴的，因为以前这个时候总是放假呀。</p></blockquote><h2 id="Projects"><a href="#Projects" class="headerlink" title="Projects"></a>Projects</h2><ul><li><a href="https://github.com/kiorky/croniter" target="_blank" rel="noopener">croniter</a> python语言，解析crontab风格的定时设置，获取下一次执行的时间。crontab format存储定时任务挺好用。</li><li><a href="https://github.com/ryukinix/decorating" target="_blank" rel="noopener">ryukinix/decorating</a> 一个包含了很多封装好的装饰器的library</li></ul><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ul><li><a href="http://www.lyonwj.com/2016/06/26/graph-of-thrones-neo4j-social-network-analysis/" target="_blank" rel="noopener">Analyzing the Graph of Thrones</a> 一个图数据库使用的相关文章，没怎么看懂，不过感觉以后会遇到。</li><li><a href="https://cbrownley.wordpress.com/2016/06/26/parsing-pdfs-in-python-with-tika/" target="_blank" rel="noopener">Parsing PDFs in Python with Tika</a> 使用tika来解析pdf</li><li><a href="https://blog.esharesinc.com/supercharging-django-productivity-at-eshares-8dbf9042825e#.4yq70uh3b" target="_blank" rel="noopener">Supercharging Django Productivity</a> django一些常用的定制，model和view中的权限等。</li><li><p><a href="http://johntellsall.github.io/johntellsall.com/class/django-queryset4/_build/slides/#1" target="_blank" rel="noopener">Functional Programming and Django QuerySets</a> python 函数式编程和 django中queryset相关的知识</p></li><li><p>Celery 性能测试和优化</p><ul><li><a href="http://atodorov.org/blog/2014/11/05/speeding-up-celery-backends/" target="_blank" rel="noopener">Speeding up Celery Backends, Part 1</a></li><li><a href="http://atodorov.org/blog/2014/11/07/speeding-up-celery-backends-part-2/" target="_blank" rel="noopener">Speeding up Celery Backends, Part 2</a></li><li><a href="http://atodorov.org/blog/2014/11/11/speeding-up-celery-backends-part-3/" target="_blank" rel="noopener">Speeding Up Celery Backends, Part 3</a></li><li><a href="https://gist.github.com/atodorov/2bc1fcd34531ad260ed7" target="_blank" rel="noopener">test code</a></li></ul></li><li><p><a href="https://ruslanspivak.com/lsbaws-part2/" target="_blank" rel="noopener">Let’s Build A Web Server. Part 2.</a> 一起造个web服务器</p></li></ul><h2 id="系统运维"><a href="#系统运维" class="headerlink" title="系统运维"></a>系统运维</h2><ul><li><a href="http://tech.uc.cn/?p=1621" target="_blank" rel="noopener">自动增量升级方案的设计及实现</a> 非常简单实用的增量升级方案</li><li><a href="http://blog.csdn.net/column/details/high-perf-network.html" target="_blank" rel="noopener">高性能网络编程系列文章－陶辉</a></li><li><a href="http://blog.csdn.net/sparkliang/article/category/660506" target="_blank" rel="noopener">libevent 源码解析</a> 基于经典的1.4版本</li><li><a href="https://www.gitbook.com/book/aceld/libevent/details" target="_blank" rel="noopener">libevent 深入浅出</a> gitbook上的电子书，机遇2.x版本</li><li><a href="http://mysql.taobao.org/monthly/" target="_blank" rel="noopener">数据库内核月报</a> 阿里数据库内核团队的一些分享</li></ul><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><ul><li><a href="https://code.aliyun.com/users/sign_in" target="_blank" rel="noopener">阿里的git平台</a></li></ul><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><ul><li>最近一段时间看 UNP和APUE比较多，还有在重新看C，主要目的还是看懂想看的经典项目的源码，看书和代码时间比较多，网络上的文章等看的比较少了。</li><li>不知不觉已经9月份了，两个月北京，淮北，沈阳，奔波多次。。有点疲惫。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;又是一年暑假，这个时间还是挺叫人高兴的，因为以前这个时候总是放假呀。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Projects&quot;&gt;&lt;a href=&quot;#Projects&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="阅读" scheme="http://orangleliu.info/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="reading" scheme="http://orangleliu.info/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令之xargs</title>
    <link href="http://orangleliu.info/2016/05/19/linux-cmd-xargs/"/>
    <id>http://orangleliu.info/2016/05/19/linux-cmd-xargs/</id>
    <published>2016-05-19T09:46:03.000Z</published>
    <updated>2016-09-19T05:36:40.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>平时只是在用find命令时会使用 <code>xargs</code>命令，一直没怎么系统的学习过，之前一次面试中被问到了，有点哑口无言，现在来学一学。</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://zh.wikipedia.org/wiki/Xargs" target="_blank" rel="noopener">维基百科</a>是这么介绍的,</p><blockquote><p>xargs是一条Unix和类Unix操作系统的常用命令。它的作用是将参数列表转换成小块分段传递给其他命令，以避免参数列表过长的问题。<br>例如删除某个目录下的文件，可以这么做 rm <code>find /path -type f</code>, 如果文件过多，就可能出现 <code>参数列表过长</code>的错误，导致执行失败。<br>这个时候使用 xargs 就能比较好的解决问题 <code>find /path -type f -print0 | xargs -0 rm</code>。</p></blockquote><p>xargs是通过标准输入或者是管道中的一段字符串来传递命令的<code>参数列表</code>, 中间会有个解析的参数的过程，然后调用相应的命令并执行，详细的参数解释请 <code>man xargs</code></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="0"><a href="#0" class="headerlink" title="-0"></a>-0</h3><p>xargs参数列表是通过空格，制表符，还有换行符来区分的，例如下面的一个命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">find</span> /tmp -name core -type f -<span class="builtin-name">print</span> | xargs /bin/rm -f</span><br></pre></td></tr></table></figure><p>一般情况下会正常的执行，但是文件名中如果有 空格或者是换行符，就会执行失败了</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">find</span> /tmp -<span class="built_in">name</span> core -<span class="built_in">type</span> f -print0 | xargs -<span class="number">0</span> /bin/rm -f</span><br></pre></td></tr></table></figure><p>这时候加上 <code>-0</code> 就能正常执行了。</p><h3 id="I"><a href="#I" class="headerlink" title="-I"></a>-I</h3><p>替换字符，把输入进来的参数替换成一个自己定义的字符，类似给输入的参数起了一个别名。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">find</span> . -<span class="built_in">name</span> <span class="string">'*.py'</span> -print0 | xargs -<span class="number">0</span> -I fname <span class="built_in">echo</span> fname python</span><br></pre></td></tr></table></figure><p>上面的命令会输出 <code>.py</code> 文件的名称，然后附加 “ python”，也就是 <code>./test.py</code> 变成了 <code>./test.py python</code></p><p>查看 <code>/</code> 目录下的文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"ls -ls -h"</span>|xargs -I <span class="keyword">cmd</span><span class="bash"> sh -c cmd<span class="string">" /"</span></span></span><br></pre></td></tr></table></figure><h3 id="–show-limits"><a href="#–show-limits" class="headerlink" title="–show-limits"></a>–show-limits</h3><p>显示当前操作系统，命令行长度的限制</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[lzz@orangleliu test]$ xargs <span class="comment">--show-limits</span></span><br><span class="line">Your environment variables take up <span class="number">2161</span> bytes</span><br><span class="line">POSIX upper limit <span class="keyword">on</span> argument <span class="built_in">length</span> (this system): <span class="number">2617231</span></span><br><span class="line">POSIX smallest allowable upper limit <span class="keyword">on</span> argument <span class="built_in">length</span> (all systems): <span class="number">4096</span></span><br><span class="line">Maximum <span class="built_in">length</span> <span class="keyword">of</span> command we could actually use: <span class="number">2615070</span></span><br><span class="line">Size <span class="keyword">of</span> command buffer we are actually using: <span class="number">131072</span></span><br><span class="line"></span><br><span class="line">Execution <span class="keyword">of</span> xargs will <span class="keyword">continue</span> now, <span class="keyword">and</span> <span class="keyword">it</span> will <span class="keyword">try</span> <span class="keyword">to</span> <span class="built_in">read</span> <span class="keyword">its</span> input <span class="keyword">and</span> <span class="built_in">run</span> commands; <span class="keyword">if</span> this <span class="keyword">is</span> <span class="keyword">not</span> what you wanted <span class="keyword">to</span> happen, please type <span class="keyword">the</span> <span class="keyword">end</span>-<span class="keyword">of</span>-<span class="built_in">file</span> keystroke.</span><br><span class="line">Warning: /bin/echo will be <span class="built_in">run</span> <span class="keyword">at</span> least once.  If you do <span class="keyword">not</span> want <span class="keyword">that</span> <span class="keyword">to</span> happen, <span class="keyword">then</span> press <span class="keyword">the</span> interrupt keystroke.</span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>删除当前目录下 <code>.c</code>文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">find</span> . -name <span class="string">"*.c"</span> -print0 | xargs -0 rm -rf</span><br></pre></td></tr></table></figure><p>查找当前目录下包含 <code>utf-8</code>的 <code>.py</code> 文件，显示行号</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find</span> . -name <span class="string">'*.py'</span> -print0 | xargs -<span class="number">0</span> <span class="keyword">grep</span> -n <span class="string">'utf-8'</span></span><br></pre></td></tr></table></figure><p>查找当前目录下 <code>.bak</code> 文件，并移动到 <code>~/old.files</code> 文件夹下面</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find</span> . -name <span class="string">"*.bak"</span> -print0 | xargs -<span class="number">0</span> -I <span class="keyword">file</span> mv <span class="keyword">file</span> ~/old.<span class="keyword">files</span></span><br></pre></td></tr></table></figure><p>实际使用中，复杂的操作比较少，暂且记录那么多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;平时只是在用find命令时会使用 &lt;code&gt;xargs&lt;/code&gt;命令，一直没怎么系统的学习过，之前一次面试中被问到了，有点哑口无言，现在来学一学。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;介绍&quot;
      
    
    </summary>
    
      <category term="linux" scheme="http://orangleliu.info/categories/linux/"/>
    
    
      <category term="cmd" scheme="http://orangleliu.info/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>lzz&#39;s reading list 06</title>
    <link href="http://orangleliu.info/2016/05/04/reading-list-lzz-201605/"/>
    <id>http://orangleliu.info/2016/05/04/reading-list-lzz-201605/</id>
    <published>2016-05-04T06:14:24.000Z</published>
    <updated>2016-06-24T02:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>一年的三分一又过完了，这个月别的事不是很多，工作的事有点多，加油吧！</p></blockquote><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="Philip-Guo"><a href="#Philip-Guo" class="headerlink" title="Philip Guo"></a>Philip Guo</h3><ul><li><a href="http://pgbovine.net/cpython-internals.htm" target="_blank" rel="noopener">cpython-internals</a> 从源码分析CPython的系列视频 国外某位大学老师的CS课程</li><li><a href="http://pgbovine.net/what-is-a-programming-language.htm" target="_blank" rel="noopener">what-is-a-programming-language</a> 同样是这位老师的一个关于编程语言的理解的视频</li><li><a href="https://talkpython.fm/episodes/show/22/cpython-internals-and-learning-python-with-pythontutor.com" target="_blank" rel="noopener">CPython Internals and Learning Python with pythontutor.com</a> Talk Pyhton to me 博客上这位老师的专场，他得名字就是 <strong>Philip Guo</strong></li><li><a href="http://www.pythontutor.com" target="_blank" rel="noopener">python 代码执行过程可视化</a> 一个在线的网站，可以单步执行查看Python代码执行过程中，Python对象的生成以及调用关系</li></ul><h3 id="Brandon-Rhodes"><a href="#Brandon-Rhodes" class="headerlink" title="Brandon Rhodes"></a>Brandon Rhodes</h3><ul><li><a href="https://www.youtube.com/watch?v=fYlnfvKVDoM" target="_blank" rel="noopener">Brandon Rhodes: All Your Ducks In A Row: Data Structures in the Std Lib and Beyond</a> Python数据类型的演讲（视频），<a href="http://rhodesmill.org/brandon/slides/2014-04-pycon/data-structures/" target="_blank" rel="noopener">ppt地址</a></li><li><a href="https://www.youtube.com/watch?v=C4Kc8xzcA68" target="_blank" rel="noopener">Python2010 The Mighty Dictionary</a> Python dict 数据类型的分析(视频）</li><li><a href="http://rhodesmill.org/brandon/" target="_blank" rel="noopener">Brandon Rhodes talks</a>  Brandon Rhodes的演讲列表，他是Dropbox的工程师，多次在Pycon上分享，非常多的干货啊</li></ul><h3 id="博客文章"><a href="#博客文章" class="headerlink" title="博客文章"></a>博客文章</h3><ul><li><a href="http://www.dataschool.io/easier-data-analysis-with-pandas/" target="_blank" rel="noopener">Easier data analysis in Python with pandas (video series)</a> 通过pandas学习数据分析的系列视频课程。</li><li><a href="https://www.oreilly.com/ideas/5-reasons-you-need-to-learn-to-write-python-decorators" target="_blank" rel="noopener">5 reasons you need to learn to write Python decorators</a> 学习Python装饰器的5个理由，讲述了装饰器的常见几大用途。包括验证，运行时间统计，日志，创建框架，重用代码等等。（不过最后带了点广告）</li><li><a href="http://www.openbookproject.net/py4fun/huffman/huffman.html" target="_blank" rel="noopener">The Basics of Data Compression 哈夫曼编码</a> 哈夫曼编码的Python实现，没有采用类，而是用字典和元组非常简单方面的实现了静态Huffmanb编码和解码</li></ul><h2 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h2><ul><li><a href="http://cdn.oreillystatic.com/en/assets/1/event/115/Introduction%20to%20Advanced%20Bash%20Usage%20Presentation.pdf" target="_blank" rel="noopener">GUN Bash:An Introduction to Advanced Usage</a> bash编程要点总结，非常实用，学习复习的好资料, 适合有一定bash经验，但是又不是很熟的人</li><li><a href="http://www.chongh.wiki/blog/2016/05/25/sourceinsight-linux/" target="_blank" rel="noopener">vim打造看c源代码的环境</a> 有需求就看看，看源码方面一点</li></ul><p>1</p><h2 id="CS基础"><a href="#CS基础" class="headerlink" title="CS基础"></a>CS基础</h2><ul><li><a href="http://csapp.cs.cmu.edu/public/students.html" target="_blank" rel="noopener">csapp public</a> csapp(深入理解计算机系统) 这本书的官方网站，包括一些资源链接和实验等</li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li><a href="http://wpceo.com/user-database-table-design/" target="_blank" rel="noopener">浅谈数据库用户表结构设计</a> 针对接入多重登录方式的用户表设计</li></ul><h2 id="有用的网址"><a href="#有用的网址" class="headerlink" title="有用的网址"></a>有用的网址</h2><ul><li><a href="http://www.weeklypython.chat/" target="_blank" rel="noopener">Weekly Python Chat</a> 用在线视频聊天室的形式，分享一些Python，开源等相关的知识。 可以看直播也可以看回放，每周一次，有些主题还不错（看视频需要梯子。。，主要是形式还听新颖）</li></ul><h3 id="安全相关网站"><a href="#安全相关网站" class="headerlink" title="安全相关网站"></a>安全相关网站</h3><p>用来获取和学习安全知识的平台</p><p>提交平台</p><ul><li>乌云       </li><li>漏洞盒子</li><li>sobug 提交平台</li><li>补天</li><li><a href="https://www.seebug.org" target="_blank" rel="noopener">seebug</a> 漏洞提交，模式有点不一样</li></ul><p>安全知识</p><ul><li>乌云知识库  比较专业的技术分析</li><li>FreeBuf  安全资讯，以及技术文章等</li><li><a href="https://security.alibaba.com/?spm=a219k.7941681.0.0.Am1A99" target="_blank" rel="noopener">阿里安全响应中心</a> 有一些漏洞分析</li></ul><h2 id="活着-5-6月"><a href="#活着-5-6月" class="headerlink" title="活着 5~6月"></a>活着 5~6月</h2><ul><li><p><code>专注</code> 这一段时间开始渐渐少关注聊天群还有微信，更多的时间花在项目开发上，业余的时间基本都是再看算法基础和操作系统基础。 这样还不错，就是看的多动手的少，要加强动手能力，把想到的理解的用实验或者模拟的方式直观的理解，还欠缺这个。</p></li><li><p><code>思考</code> 在其他博客上看到说，大部分程序员解决性能问题的方式就是 打开编辑，把代码看一遍，猜猜哪里出了问题，然后改改改，最后运行，期待能运行快点。 是有点似曾相识的感觉，对性能问题并没有专业的测量，还有思考，瞎猜，乱猜，然后yy一个解决方式，改完之后发现没效果，然后再尝试其他的。。。时间就是怎么被浪费掉的。</p></li><li><p>6.1这天终于搬家了，13年10月来北京，快3年了吧，这应该是第五次搬家了。 住过自建房，住过小黑屋，住过地下室，也住过高层小区，隔断，单间，主卧。。。这种租房出现过的词基本都体验了一遍。 这次住的比较靠外了，在<code>育新</code>,五环之外了，房东人挺不错，希望可以住的长久一些，安安稳稳过日子呀。</p></li><li><p>最近越来越感到过日子的琐碎了，上个月就是找房子找房子，虽然说房子租出去不是很着急，总是个事啊。 搬完家，就开始收拾，各种洗刷刷，各种擦擦擦，然后就是修理不好用的，置办点想用的。接着就是端午节（6.8）回趟家，办身份证，现在的公安局还挺跟上时代，每个人都要录指纹了，新身份证还能给你邮寄到任何地方。 这就是生活啊，在家跟父母，有他们操心，一个人在外面的时候，能省的都省了，也不操心，现在两口子了，啥事该操心的就跑不了了。。。好好承担起来责任吧，小伙子。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;一年的三分一又过完了，这个月别的事不是很多，工作的事有点多，加油吧！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Python&quot;&gt;&lt;a href=&quot;#Python&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="reading" scheme="http://orangleliu.info/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title>lzz&#39;s reading list 05</title>
    <link href="http://orangleliu.info/2016/04/23/reading-list-lzz-201604/"/>
    <id>http://orangleliu.info/2016/04/23/reading-list-lzz-201604/</id>
    <published>2016-04-23T00:57:26.000Z</published>
    <updated>2016-08-18T09:54:53.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="书单-amp-amp-博客"><a href="#书单-amp-amp-博客" class="headerlink" title="书单 &amp;&amp; 博客"></a>书单 &amp;&amp; 博客</h3><ul><li><a href="https://github.com/tinyclub/open-c-book" target="_blank" rel="noopener">C语言编程透视</a> 开源电子书，主要说说 <code>Hello World</code> 背后发生的故事</li><li><a href="http://blog.csdn.net/column/details/high-perf-network.html" target="_blank" rel="noopener">高性能网络编程</a>  陶辉大神网络编程的系列分享</li><li><a href="http://how-to-write-makefile.readthedocs.org/zh_CN/latest/index.html" target="_blank" rel="noopener">跟我一起写Makefile</a> MakeFile 最广为流传的教程之一</li></ul><ul><li><a href="http://www.cnblogs.com/huangxincheng/" target="_blank" rel="noopener">一线码农 博客</a>携程的一个同行，很多基础和实用的分享，算法，redis，mongodb，还有WIN相关的开发经验。</li></ul><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><ul><li><a href="https://www.codementor.io/python/tutorial/essential-python-interview-questions" target="_blank" rel="noopener">Python 面试15问</a> 比较经典的面试问题</li><li><a href="https://www.reddit.com/r/Python/comments/4fdi6j/how_fast_can_we_make_interpreted_python/" target="_blank" rel="noopener">How fast can we make interpreted Python?</a> reddit上的一个关于Python解释器性能相关的讨论，CPython2，Cpython3，Pypy还是Falcon，或者其他的呢？</li><li><a href="http://faster-cpython.readthedocs.org/cpython36.html" target="_blank" rel="noopener">Faster CPython</a> cpython36 解释器相关的内容，各种优化的方案以及测试等信息, 对Python解释器关注的可以看看。</li></ul><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><ul><li><a href="http://coolshell.cn/articles/4102.html" target="_blank" rel="noopener">如何学好C语言</a> 皓哥的建议和心得，老文章，多拿来看看. 那么多年都还是看了C就头晕，这一次要克服这个坎。语言、算法和数据结构、系统调用和设计，其实还是基础不够，所以那些上层建筑也是空中楼阁呀，深入问几句就不知所以然了。要有个长期的心里准备，别被其他的小狐狸吸引走，健全的知识体系是要专注才能慢慢建立起来的。</li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li><a href="http://www.cnblogs.com/DBFocus/archive/2011/10/12/2208580.html" target="_blank" rel="noopener">一步一步进行数据库设计</a> 博客园上的一系列数据库设计的经验分享，针对系统开发中数据设计进行的经验总结，包括案例的思考设计过程，类似的文章看到的比较少，值得学习。</li><li><a href="http://dbanotes.net/arch/salesforce_multitenancy_intro.html" target="_blank" rel="noopener">剖析Force.com的多租户架构</a>  讲解了saleforce多租户架构的设计以及实现方式的探讨，对于需要做这方面需求的有个很直观的认识</li></ul><h3 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h3><ul><li><a href="https://github.com/aosabook/500lines" target="_blank" rel="noopener">500lines</a> 这本书和《开源框架》是一个网站出的，里面讲的的是一些常用的web的或者是开发的组件，几百行的代码来实现一个核心功能的过程，非常值得一看。</li><li><a href="https://github.com/yangyangwithgnu/use_vim_as_ide" target="_blank" rel="noopener">像IDE一样使用vim</a> 作者基于众多的实用插件打造自己的 <code>C/C++</code> vim ide，依赖插件比较多，效果还是挺好的</li><li><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md" target="_blank" rel="noopener">命令行的艺术</a> github上start超过25000，一篇简短的文章包含丰富的shell编程知识，仔细读一读，能收获不少。</li></ul><h3 id="架构-经验"><a href="#架构-经验" class="headerlink" title="架构*经验"></a>架构*经验</h3><ul><li><a href="http://www.jikexueyuan.com/course/2658.html" target="_blank" rel="noopener">见微知著-技术分享</a>  雨痕的经验分享，大牛的实战思考</li><li><a href="http://web.archive.org/web/20120211232457/http://www.reachcrm.com/2010/03/11/multi-tenant-strategy-for-saas-using-mysql5" target="_blank" rel="noopener">Multi Tenant Saas using MySQL5</a>  一个实例一个DB来实现SAAS中的多租户，这位作者讲述了他做一个SAAS系统的经验。 tenant id对终端用户和租户均不可知，base表和应用表权限分离，把租户信息和应用信息存在不同的数据库。 他这里会给每个租户创建不同的MySQL用户，每个租户的用户连接数据库时候会使用当前租户的MySQL配置，通过一个定制的视图（视图和base的区别就是增加了租户ID的过滤条件）来获取用户的数据。主要是通过MySQL和<code>USER( )</code>来建立自动数据过滤视图，web层的开发就可以从无数的 <code>where tid=xxx</code> 中解脱出来。 YII 框架的wiki上有个php版本的<a href="http://www.yiiframework.com/wiki/603/a-multi-tenant-strategy-using-yii-and-mysql/" target="_blank" rel="noopener">简单实现</a></li></ul><h3 id="生与活"><a href="#生与活" class="headerlink" title="生与活"></a>生与活</h3><ul><li><p>对于某些不切实际的东西过于偏执，特别是技术的东西，方向上有问题。 太贪多，缺乏从一而终，从潜入深的过程，其他的能力的自我要求太低，更多的从非技术层面去认识和理解人事。</p></li><li><p>之前我每天都花好多时间在技术群，看的多聊的少，每天看很多技术博客，泛读很多，到现在我才发现，很多时间都是毫无收获的，看完一堆东西之后，我问自己收获到了什么，很多时候都是啥也没有记住，也没有印象深刻的新知识呀。 原来之前那么久效率那么低，怪不得总是觉得事倍功半。还是踏踏实实把读书计划落实了，每天进步一点点就足够了呀。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;书单-amp-amp-博客&quot;&gt;&lt;a href=&quot;#书单-amp-amp-博客&quot; class=&quot;headerlink&quot; title=&quot;书单 &amp;amp;&amp;amp; 博客&quot;&gt;&lt;/a&gt;书单 &amp;amp;&amp;amp; 博客&lt;/h3&gt;&lt;ul&gt;

      
    
    </summary>
    
    
      <category term="reading" scheme="http://orangleliu.info/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title>Python和shell中Base64编码使用那些事</title>
    <link href="http://orangleliu.info/2016/04/17/python-shell-base64/"/>
    <id>http://orangleliu.info/2016/04/17/python-shell-base64/</id>
    <published>2016-04-17T01:40:30.000Z</published>
    <updated>2016-05-20T03:43:57.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>做开发第一个接触的编码方式就是Base64，当时是用url来传输一些参数，传输的两端会用Base64来编码和解码，保证数据不被url转义破坏。</p></blockquote><p>下面是 <a href="https://zh.wikipedia.org/wiki/Base64" target="_blank" rel="noopener">维基百科</a> Base64  中的介绍，其实自己实现起来也不是很麻烦。</p><blockquote><p><strong>Base64</strong> 是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6个比特为一个单元，对应某个可打印字符。三个字节有24个比特，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示。它可用来作为电子邮件的传输编码。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。</p></blockquote><h3 id="Shell中使用"><a href="#Shell中使用" class="headerlink" title="Shell中使用"></a>Shell中使用</h3><p>一般Linux系统中都会有个base64的命令，openssl命令也有base64的选项。</p><h4 id="base64-命令"><a href="#base64-命令" class="headerlink" title="base64 命令"></a>base64 命令</h4><p>字符串操作，更多参考 <code>man base64</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># echo "you are so cool"|base64</span></span><br><span class="line">eW91IGFyZSBzbyBjb29sCg==</span><br><span class="line"></span><br><span class="line"><span class="comment"># echo "eW91IGFyZSBzbyBjb29sCg=="|base64 -d</span></span><br><span class="line">you are so cool</span><br><span class="line"></span><br><span class="line"><span class="comment">#中文</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># echo "你真帅"|base64</span></span><br><span class="line">5L2g55yf5biFCg==</span><br><span class="line"></span><br><span class="line"><span class="comment"># echo "5L2g55yf5biFCg=="|base64 -d</span></span><br><span class="line">你真帅</span><br></pre></td></tr></table></figure><h4 id="openssl命令"><a href="#openssl命令" class="headerlink" title="openssl命令"></a>openssl命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ openssl enc -base64 &lt;&lt;&lt; <span class="string">"good boy"</span></span><br><span class="line">Z29vZCBib3kK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ openssl enc -base64 -d &lt;&lt;&lt; <span class="string">"Z29vZCBib3kK"</span></span><br><span class="line">good boy</span><br></pre></td></tr></table></figure><h3 id="Python-使用base64"><a href="#Python-使用base64" class="headerlink" title="Python 使用base64"></a>Python 使用base64</h3><p>标准库中提供了base16，base32, base64 好几个接口，最常用的是 <code>base64.b64encode</code> 和 <code>base64.b64decode</code> ，还有针对于url的改进方式 <code>base64.urlsafe_b64encode</code> 和 <code>base64.urlsafe_b64decode</code>, 这一对方法和标准的base64不同的是针对url改善了64个字符中最后2个，具体的看这里的<a href="https://docs.python.org/2/library/base64.html#base64.urlsafe_b64decode" target="_blank" rel="noopener">说明</a>, 结合wiki中的 <code>base64索引表</code> 就明白了。</p><h4 id="编码-和-解码"><a href="#编码-和-解码" class="headerlink" title="编码 和 解码"></a>编码 和 解码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">"import base64; print base64.b64encode('you are so cool')"</span></span><br><span class="line">eW91IGFyZSBzbyBjb29s</span><br><span class="line"></span><br><span class="line">$ python -c <span class="string">"import base64; print base64.b64decode('eW91IGFyZSBzbyBjb29s')"</span></span><br><span class="line">you are so cool</span><br></pre></td></tr></table></figure><p>注意无法对unicode直接base64编码, 所以请注意字符编码问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python -c "import base64; print base64.b64encode('酷')"</span></span><br><span class="line">6YW3</span><br><span class="line"></span><br><span class="line"><span class="comment"># python -c "import base64; print base64.b64encode(u'酷')"</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;string&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/base64.py"</span>, line 53, <span class="keyword">in</span> b64encode</span><br><span class="line">    encoded = binascii.b2a_base64(s)[:-1]</span><br><span class="line">UnicodeEncodeError: <span class="string">'ascii'</span> codec can<span class="string">'t encode characters in position 0-2: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure><h4 id="常用代码片段"><a href="#常用代码片段" class="headerlink" title="常用代码片段"></a>常用代码片段</h4><p>经常使用的方式是对编码之后字符串结尾的 <code>=</code>做剔除 。对于 <code>urlsafe_b64encode</code> 和 <code>b64encode</code> 都适用，针对不同编程语言相互转化的情况请具体参照语言的实现方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base64encode</span><span class="params">(raw)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> base64.urlsafe_b64encode(raw).strip(<span class="string">"="</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base64decode</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> base64.urlsafe_b64decode(data + <span class="string">"="</span> * (-len(data)%<span class="number">4</span>))</span><br></pre></td></tr></table></figure><h3 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h3><ul><li><a href="http://askubuntu.com/questions/178521/how-can-i-decode-a-base64-string-from-the-command-line" target="_blank" rel="noopener">how can i decode a base64 string from command line</a></li><li><a href="https://zh.wikipedia.org/wiki/Base64" target="_blank" rel="noopener">base64 中文Wiki</a></li><li><a href="https://docs.python.org/2/library/base64.html" target="_blank" rel="noopener">python2 base64文档</a></li><li><a href="https://pymotw.com/2/base64/" target="_blank" rel="noopener">PyMOTW base64</a></li><li><a href="http://stackoverflow.com/questions/3302946/how-to-base64-url-decode-in-python" target="_blank" rel="noopener">how to base64 url decode in python</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;做开发第一个接触的编码方式就是Base64，当时是用url来传输一些参数，传输的两端会用Base64来编码和解码，保证数据不被url转义破坏。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面是 &lt;a href=&quot;
      
    
    </summary>
    
      <category term="密码学" scheme="http://orangleliu.info/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="shell" scheme="http://orangleliu.info/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>lzz&#39;s reading list 04</title>
    <link href="http://orangleliu.info/2016/04/05/reading-list-201602/"/>
    <id>http://orangleliu.info/2016/04/05/reading-list-201602/</id>
    <published>2016-04-05T06:51:08.000Z</published>
    <updated>2016-04-05T07:01:59.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p> 2月过年，回家的时间基本没有怎么阅读，所以两个月合在一起吧，顺便改了个标题名字，嘿嘿。</p></blockquote><h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h3><ul><li>Unix编程艺术（中文版）  读了一半</li><li><a href="http://interactivepython.org/runestone/static/thinkcspy/index.html" target="_blank" rel="noopener">How to Think Like a Computer Scientist</a>  刚开始读</li><li><a href="http://interactivepython.org/runestone/static/pythonds/index.html" target="_blank" rel="noopener">Problem Solving with Algorithms and Data Structures</a>  刚开始读</li><li><a href="http://inst.eecs.berkeley.edu/~cs61a/sp12/book/index.html" target="_blank" rel="noopener">伯克利cs61A的教材</a>    未读, 看起来内容还不错</li><li>《一万小时天才理论 》 之前经常看到别人引用，这次才真正看到书。 1w小时其实是作者根据别人成功所需要的练习时间推算出来的，这个并不是书的重点。 书中提出最主要的成功因素是 <code>精深练习</code>，也就是说对一门技术类似的知识，需要深度的练习，同时也是讲究方式方法的，还有一些情感，品质，环境的因素。 用自己话总结下就是：能坐住冷板凳，带有激情的研究知识的细节，建立更高层次的知识体系，实践实践实践。</li><li>《汇编语言》 王爽老师的，随便翻翻，没有细细研读，后面有计划认真看一看</li></ul><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><ul><li><a href="http://scotdoyle.com/python-epoll-howto.html" target="_blank" rel="noopener">Python epoll how to</a> py中怎样使用epoll来写socket程序，包括边缘触发和水平触发的例子</li><li><a href="https://speakerdeck.com/benoitc" target="_blank" rel="noopener">benoitc 的ppt</a> benoitc是Gunicorn的创建者，这里有很多他的演讲ppt，如果你想研究Gunicorn，有必要看看</li><li><a href="https://blog.heroku.com/archives/2016/3/17/in_deep_with_django_channels_the_future_of_real_time_apps_in_django" target="_blank" rel="noopener">Finally, Real-Time Django Is Here: Get Started with Django Channels</a> 介绍了Django realtime 应用的一个新的方案 django-channels, 这可能是Django的未来哦，毕竟gevent 等方案太麻烦</li><li><a href="http://wiki.geekdream.com/Specification/json-rpc_2.0.html" target="_blank" rel="noopener">JSON-RPC2.0 规范中文版</a> jsonrpc 定义非常简洁和轻量，rpc类型的服务设计需要读一读</li><li><a href="https://www.dabapps.com/blog/higher-level-query-api-django-orm/" target="_blank" rel="noopener">Building a higher-level query API: the right way to use django’s ORM</a>  这是个比较早的文章，作者用一种hack的方式，对django的model进行拓展，自定义Manager等，非常有先见。 文章通过循序渐进的方式，讲述了怎样写一个健壮的model。</li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul><li><a href="https://www.gitbook.com/book/gnuhpc/redis-all-about/details" target="_blank" rel="noopener">Redis开发运维实战指南</a></li><li><a href="http://redisbook.com/index.html" target="_blank" rel="noopener">Redis 设计与实现</a></li></ul><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><ul><li><a href="http://www.freebuf.com/tools/94777.html" target="_blank" rel="noopener">Python 渗透测试工具集合</a>  列举了非常多的py相关的渗透工具，在需要的时候可以随时查找</li><li><a href="http://blog.knownsec.com/wp-content/uploads/2014/07/%E7%BB%99%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E7%BB%88%E6%9E%81XSS%E9%98%B2%E6%8A%A4%E5%A4%87%E5%BF%98%E5%BD%95.pdf" target="_blank" rel="noopener">给开发者的终极XSS防护备忘录</a>  知道创宇翻译，web开发从业者需要认真读一读，说实话有点专业，看起来也挺费功夫的。 最好去乌云上找找相关漏洞的报告来学学。</li></ul><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><ul><li><a href="http://autobahn.ws/python/" target="_blank" rel="noopener">AutoBahn-Python</a>  实现了websocket和WAMP协议的应用服务器，基于twisted和asyncio，用来开发实时交互应用或者物联网应用等，是AutoBahn的一个子项目，其他项目包括不同场景和语言的客户端和服务器端，值得关注下。有点类似于socket.io这种东西。 Python中websocket的方案是非常多的，tornado，gevent，asyncio等等，也算是百家齐放，开源出来的demo比较多，成熟的案例见到的比较少。</li><li><a href="http://wamp-proto.org/implementations/" target="_blank" rel="noopener">WAMP</a> 这是个基于websocket，json，url的应用层协议，支持pub/sub, rpc, 浏览器方式，并且有这种语言的实现。 物联网，实时应用都有一些成功的案例。感觉非常有意思。</li><li><a href="https://github.com/Suor/django-cacheops" target="_blank" rel="noopener">django-cacheops</a> 主要用来缓存django queryset的一个框架，针对查询结果的缓存。</li><li><a href="https://github.com/mopemope/meinheld" target="_blank" rel="noopener">meinheld</a> 基于Python+C的一个高性能异步 WSGI web服务器，可以和Gunicorn结合，作为它的一种自定义worker。 性能非常高。</li></ul><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><h4 id="过年月"><a href="#过年月" class="headerlink" title="过年月"></a>过年月</h4><ul><li>这个月赶上春节，有10来天的时间回家过年了。 基本没怎么开电脑，但是手机也是玩个不停，回到家里发现家里的阿姨们都开始用只能手机了，还自己建立了微信群，玩了好几天的抢红包，正因为有了这个微信群整个春节这些亲戚们一起的活动更多了，交流也比从前多了不少。</li><li>回到淮北最大的感觉就是 日子不好过，由于煤炭行业的低迷，依靠煤炭生活的日子越来越不好过了，年轻人越来越多的辞职，老工人们也过的比较清苦。</li><li>发现认识自己是个艰难的过程，不是自负，就是自卑呀！</li><li>投了几份简历都被拒绝了，面了几个公司也不咋地，发现基础还是薄弱， 很多问题曾经研究过现在没多大印象了，在不就是记得不准。</li></ul><h4 id="3月"><a href="#3月" class="headerlink" title="3月"></a>3月</h4><ul><li>之前的碎片阅读太多，养成了很多坏习惯。 囫囵吞枣，不加思考，只收集不消化，看的多，动手少，其实花了大量的时间，确实没有多少效果。最近再看1w小时理论 这本书，所以准备改改思考，调整下生活学习的状态。 从精深练习，专心研究开始一点一点的认知和学习。</li><li>开始减少泛读的量，开始坚持每周几个小时的其他方面书籍阅读。 对于技术着手看Gunicorn的源码，对于其中的知识点慢慢补充。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt; 2月过年，回家的时间基本没有怎么阅读，所以两个月合在一起吧，顺便改了个标题名字，嘿嘿。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;读书&quot;&gt;&lt;a href=&quot;#读书&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="他山之石" scheme="http://orangleliu.info/categories/%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/"/>
    
    
      <category term="reading" scheme="http://orangleliu.info/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title>python logging 模块使用杂记</title>
    <link href="http://orangleliu.info/2016/03/14/python-logging-somenotes/"/>
    <id>http://orangleliu.info/2016/03/14/python-logging-somenotes/</id>
    <published>2016-03-14T10:25:26.000Z</published>
    <updated>2016-11-11T02:29:09.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>标准库logging模块是线程安全的，在单进程应用中一般的问题集中在如何切分等，多进程中使用logging相对来说就要复杂一些，需要定制的handler来解决多进程安全问题，或者使用开源方案来解决。下面零零散散记录一些使用的心得。</p></blockquote><h3 id="日志切分"><a href="#日志切分" class="headerlink" title="日志切分"></a>日志切分</h3><p>logging标准库中提供的日志切分的方式有</p><ul><li>RotatingFileHandler 基于文件大小的切分，支持多个backup</li><li>TimedRotatingFileHandler 基于时间间隔的切分，支持多种时间单位，多个backup。 这种方式在程序启动时会用log文件最后修改的时间戳做start time计算，如果我定义24小时切割一次，而程序每12小时重启一次，那么永远都不会切割日志，因为每次程序启动到结束不够24小时，这就是它不好的地方。</li><li>很多时候需要能按整点时间轮询的日志 例如每天只是这一天24小时的记录，每小时只是当前这个小时的记录。标准库无法满足，需要自己写handler，当然现成的轮子也很多。</li></ul><p>当日志文件被移动或删除后:</p><ul><li>FileHandler会继续将日志输出至原有的文件描述符, 从而导致日志切分后日志丢失.</li><li>WatchedFileHandler会检测文件是否被移动或删除, 如果有, 会新建日志文件, 并输出日志到新建的文件. 这个handerl+corntab可以很容易的实现日志的割切。</li></ul><h3 id="多进程日志"><a href="#多进程日志" class="headerlink" title="多进程日志"></a>多进程日志</h3><ul><li>多进程往一个日志文件写日志（日志可能会错行，变得杂乱无序)</li><li>进程安全方案: 看到有些方案是使用文件锁来实现实现同步，也看到有些是使用多进程的queue来实现同步，或者通过 sockethandler 传送给单独服务</li></ul><h4 id="ConcurrentLogHandler"><a href="#ConcurrentLogHandler" class="headerlink" title="ConcurrentLogHandler"></a>ConcurrentLogHandler</h4><p>看到stackoverflow上很多人回答用 <a href="https://pypi.python.org/pypi/ConcurrentLogHandler/0.9.1" target="_blank" rel="noopener">ConcurrentLogHandler</a>来解决多logging进程安全问题，它是RotatingFileHandler的多进程版本，使用<code>文件锁</code>来保持同步。</p><p>源码<a href="http://bazaar.launchpad.net/~lowell-alleman/python-concurrent-log-handler/master/files" target="_blank" rel="noopener">在这里</a>, 结合多进程Gunicorn+Django来测了测，使用方法<a href="https://pypi.python.org/pypi/ConcurrentLogHandler/0.9.1" target="_blank" rel="noopener">参见文档</a>，非常简单方面.</p><p>我这1000并发测试的情况下，性能影响不大，TPS 大概百分之十（这个主要取决于日志的复杂度）损耗，日志同步和轮询都没问题。 更大规模和复杂的情况还不清楚会怎样，在小程序中使用应该问题不大，要求较高的系统需要进一步测试。</p><h3 id="socket-日志"><a href="#socket-日志" class="headerlink" title="socket 日志"></a>socket 日志</h3><p>官方的 <a href="https://docs.python.org/2/howto/logging-cookbook.html" target="_blank" rel="noopener">loging cookbook</a> 中推荐在多进程中使用 <code>SocketHandler</code>来解决日志问题, 还给出来一个简单的例子 <a href="https://docs.python.org/2/howto/logging-cookbook.html#sending-and-receiving-logging-events-across-a-network" target="_blank" rel="noopener">here</a>。 另外还有很多开源的方案，Syslog，Sentry，或者Github找些别人写的日志收集server，自己撸一个轮子等，选择很多，适合日志集中收集管理。</p><h3 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h3><ul><li>root 级别的设置只在应用中进行，不要在模块中设置</li><li>一个文件中有多个类，日志最好每个类一个logger，否则在生产中很难快速定位问题</li><li><code>self.logger = logging.getLogger(type(self).__name__)</code> 这种方式在base class设置，这样每个子类都有不同的logger名称</li><li>规范format，这样容易处理日志</li><li>logging对整体的性能有些影响的，如果想减少到更小可以 <code>import syslog</code>， 但是怎么回溯，收集日志等要好好盘算下，<a href="http://www.aminus.org/blogs/index.php/2008/07/03/writing-high-efficiency-large-python-sys-1?blog=2" target="_blank" rel="noopener">use nothing but local syslog</a></li><li>需要记录一个异常的错误栈情况，可以使用 Logger.exception() 方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#logger 是已经初始化的Logger</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> err</span><br><span class="line">except <span class="keyword">Exception</span> <span class="keyword">as</span> e:</span><br><span class="line">    logger.<span class="keyword">exception</span>(<span class="string">""</span>)</span><br></pre></td></tr></table></figure><h3 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h3><p>python2.6 的logging模块源码，<a href="https://github.com/python/cpython/tree/2.6/Lib/logging" target="_blank" rel="noopener">源码在这里</a>。日志相关的是PEPE是 <code>pep282</code>。</p><p>logging模块一共是3个文件</p><ul><li><code>__init__.py</code>  常量定义，基础的API，logger，handler的父类，handler的适配器等等，最核心的代码</li><li><code>config.py</code>  配置读取相关模块</li><li><code>handlers.py</code>  不同的handlers来处理日志的输出策略，如果自己写handler 这里是最好的例子</li></ul><h4 id="通过代码来看看使用-basicConfig-发生了什么？"><a href="#通过代码来看看使用-basicConfig-发生了什么？" class="headerlink" title="通过代码来看看使用 basicConfig 发生了什么？"></a>通过代码来看看使用 basicConfig 发生了什么？</h4><p>你可以看这个文章<a href="http://atlee.ca/blog/posts/diving-into-python-logging.html" target="_blank" rel="noopener">dive into logging</a>, 其实看下代码就能明白。</p><p>在 <code>import logging</code> 的时候会自动生成一个 root logger, name就是root，默认级别是 warning</p><p>源码里是这样的</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">root = RootLogger(WARNING)</span><br><span class="line">Logger<span class="selector-class">.root</span> = root</span><br><span class="line">Logger<span class="selector-class">.manager</span> = Manager(Logger.root)</span><br></pre></td></tr></table></figure><p>这个默认的logger也basicConfig需要才能使用，basicConfig其实就是设置root logger的handler。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: logger = logging.getLo</span><br><span class="line">logging.getLogger       logging.getLoggerClass</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: logger = logging.getLogger(<span class="string">'lzz'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: logger.info(<span class="string">'lzz'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: logger.root.info(<span class="string">"lzz"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: logging.basicConfig(level=logging.INFO)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: logging.root.info(<span class="string">"hello"</span>)</span><br><span class="line">INFO:root:hello</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: logger.info(<span class="string">'lzz'</span>)</span><br><span class="line">INFO:lzz:lzz</span><br></pre></td></tr></table></figure><h4 id="阅读总结"><a href="#阅读总结" class="headerlink" title="阅读总结"></a>阅读总结</h4><ul><li>Logger 之间是一个树型结构，root Logger是根节点，父子关系等由Manager类处理</li><li>一般是获取一个Logger实例，设置log级别，添加一个或者多个Handler，一个或者多个Filter，Handler中设置format日志格式。</li><li>执行一个logger方法的过程： 例如<code>logger.info(&quot;hi boy&quot;)</code>,  首先logger检查level是否符合，如果level正确，调用 <code>Logger._log()</code>方法，根据log内容组成 <code>LogRecord</code>, 调用<code>Logger.handle(self, record)</code>方法。</li></ul><p><code>Logger.handler()</code> 检查logger是否disable，如果可用, 再调用 <code>Logger.filter(record)</code>, 根据设置的过滤器来过滤日志。 如果record没有过滤掉，那么继续调用 <code>Logger.callHandler(self, record)</code>, 根据配置的handlers交给handlers来处理日志。说了一通，不如直接看<a href="https://docs.python.org/2/howto/logging.html#logging-flow" target="_blank" rel="noopener">官方的流程图</a></p><p><img src="/img/logging_flow.png" alt="官方的流程图"></p><ul><li>Filter 比设置日志level有更大的灵活性, Logger和Handlers都可以设置Filter, 例如写一个过滤 hello关键字的Filter。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloFilter</span><span class="params">(logging.Filter)</span>:</span></span><br><span class="line">    <span class="comment">#overwrite filter method, 最好先看看LogRecord这个类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter</span><span class="params">(self, record)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> record.msg.find(<span class="string">'hello'</span>) &gt; <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">logger.addFilter(HelloFilter())</span><br><span class="line">logger.info(<span class="string">"hello"</span>)</span><br><span class="line">logger.info(<span class="string">"hello boy"</span>)</span><br><span class="line">logger.info(<span class="string">"hi girl"</span>)</span><br></pre></td></tr></table></figure><ul><li>简单的类关系如下图</li></ul><p><img src="/img/logging_class.png" alt="class_pic"></p><h3 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h3><ul><li><a href="https://docs.python.org/2/library/logging.html#module-logging" target="_blank" rel="noopener">logging api</a> 查询手册</li><li><a href="https://docs.python.org/2/howto/logging.html" target="_blank" rel="noopener">logging howto</a> 官方教程，基础知识，全面实用</li><li><a href="https://docs.python.org/2/howto/logging-cookbook.html" target="_blank" rel="noopener">logging cookbook</a>  进阶必读，覆盖常用情景</li><li><a href="http://www.blog.pythonlibrary.org/2014/02/11/python-how-to-create-rotating-logs/" target="_blank" rel="noopener">python-how-to-create-rotating-logs</a>  简单明了说明了 两个常用的日志轮询handler怎么使用</li><li><a href="http://www.shutupandship.com/2012/02/how-python-logging-module-works.html" target="_blank" rel="noopener">how-python-logging-module-works</a> 源码笔记，看懂logging怎样工作</li><li><a href="https://www.python.org/dev/peps/pep-0282/" target="_blank" rel="noopener">pep282</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;标准库logging模块是线程安全的，在单进程应用中一般的问题集中在如何切分等，多进程中使用logging相对来说就要复杂一些，需要定制的handler来解决多进程安全问题，或者使用开源方案来解决。下面零零散散记
      
    
    </summary>
    
      <category term="编程" scheme="http://orangleliu.info/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="logging" scheme="http://orangleliu.info/tags/logging/"/>
    
  </entry>
  
  <entry>
    <title>Python中prefork模式的简单实现</title>
    <link href="http://orangleliu.info/2016/03/06/python-pre-fork-mode-use/"/>
    <id>http://orangleliu.info/2016/03/06/python-pre-fork-mode-use/</id>
    <published>2016-03-06T01:54:59.000Z</published>
    <updated>2016-03-11T03:48:35.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="prefork-模式是啥？"><a href="#prefork-模式是啥？" class="headerlink" title="prefork 模式是啥？"></a>prefork 模式是啥？</h3><p>这种模式最早看到是在Apache的介绍中，所以一般看到这个词就会想到Apache(现在也支持其他模式 worker，event等)，web服务器用的比较多nginx，gunicorn，unicorn等。 这个模式中有Master和Worker两种角色的进程，Master进程fork出Worker来处理任务（例如http请求）。 Master进程的作用是管理Worker进程，包括fork出worker进程，接受外部信号对worker生命周期进行控制，对worker进程进行健康检查等等，Worker进程的作用就是处理任务(干活)。</p><h3 id="这种模式的好处？"><a href="#这种模式的好处？" class="headerlink" title="这种模式的好处？"></a>这种模式的好处？</h3><ul><li>充分利用多个CPU，特别是在python这种语言中，不受GIL的影响</li><li>一个进程出现问题，其他进程仍然可以正常服务，不会整个server挂掉</li></ul><p>盗了一张图来是 <a href="http://xiaorui.cc" target="_blank" rel="noopener">xiaorui.cc</a>，Gunicorn prefork流程。</p><p><img src="/img/preforkxxx.png" alt="Gunicorn prefork"></p><h3 id="python-中怎么实现的？"><a href="#python-中怎么实现的？" class="headerlink" title="python 中怎么实现的？"></a>python 中怎么实现的？</h3><p>用的知识，和简单的思路。</p><p>下面是阅读Gunicorn源码之后，实现的一个简单的prefork程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#master-slaves.py  python2.7.x</span></span><br><span class="line"><span class="comment">#orangleliu@gmail.com</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">简单的模拟pre-fork模式，master进程控制多个子进程</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这里实现这么几个信号</span></span><br><span class="line"><span class="string">INT ctrl+c 退出</span></span><br><span class="line"><span class="string">TTIN 增加一个worker</span></span><br><span class="line"><span class="string">TTOU 减少一个worker</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    子进程要实现一些特定的信号来响应外界和父进程的操作</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    WORKERS = &#123;&#125;</span><br><span class="line">    SIG_QUEUE = []</span><br><span class="line">    SIGNALS = [getattr(signal, <span class="string">"SIG%s"</span> % x)</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"INT TTIN TTOU"</span>.split()]</span><br><span class="line">    SIG_NAMES = dict(</span><br><span class="line">        (getattr(signal, name), name[<span class="number">3</span>:].lower()) <span class="keyword">for</span> name <span class="keyword">in</span> dir(signal)</span><br><span class="line">        <span class="keyword">if</span> name[:<span class="number">3</span>] == <span class="string">"SIG"</span> <span class="keyword">and</span> name[<span class="number">3</span>] != <span class="string">"_"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, worker_nums=<span class="number">2</span>)</span>:</span></span><br><span class="line">        self.worker_nums = worker_nums</span><br><span class="line">        self.master_name = <span class="string">"Master"</span></span><br><span class="line">        self.reexec_pid = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"start master"</span></span><br><span class="line"></span><br><span class="line">        self.pid = os.getpid()</span><br><span class="line">        self.init_signals()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_signals</span><span class="params">(self)</span>:</span></span><br><span class="line">        [signal.signal(s, self.signal) <span class="keyword">for</span> s <span class="keyword">in</span> self.SIGNALS]</span><br><span class="line">        signal.signal(signal.SIGCHLD, self.handle_chld)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">signal</span><span class="params">(self, sig, frame)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        普通的信号发生的时候，往信号队列增加一个信号</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">if</span> len(self.SIG_QUEUE) &lt; <span class="number">5</span>:</span><br><span class="line">            self.SIG_QUEUE.append(sig)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.manage_workers()</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">                <span class="comment"># 如果不增加sleep 整个master进程就会进入几乎100 cpu的状态</span></span><br><span class="line">                <span class="comment"># 使用sleep的好处就是master的cpu消耗小很多，对于来自系统的给master的信号可以即使反馈</span></span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">                sig = self.SIG_QUEUE.pop(<span class="number">0</span>) <span class="keyword">if</span> len(self.SIG_QUEUE) <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line">                <span class="keyword">if</span> sig <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                    self.manage_workers()</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> sig <span class="keyword">not</span> <span class="keyword">in</span> self.SIG_NAMES:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"unknow signals:%s"</span>%sig</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                signame = self.SIG_NAMES.get(sig)</span><br><span class="line">                handler = getattr(self, <span class="string">"handle_%s"</span>%signame, <span class="keyword">None</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> handler:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"Unhandler signal: %s"</span>%signame</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                handler()</span><br><span class="line">        <span class="keyword">except</span> StopIteration:</span><br><span class="line">            self.halt()</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            self.halt()</span><br><span class="line">        <span class="keyword">except</span> SystemExit:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">print</span> e</span><br><span class="line">            self.stop()</span><br><span class="line">            sys.exit(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_chld</span><span class="params">(self, sig, frame)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        对于子进程退出SIGCHLD信号处理，防止产生大量僵尸进程</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.reap_workers()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_int</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        ctrl+c 关闭master进程，先关闭子进程，然后抛出异常，自己退出</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.stop()</span><br><span class="line">        <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_ttin</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        增加一个子进程</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"add a worker"</span></span><br><span class="line">        self.worker_nums += <span class="number">1</span></span><br><span class="line">        self.manage_workers()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_ttou</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        减少一个子进程</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"deincrease a worker"</span></span><br><span class="line">        <span class="keyword">if</span> self.worker_nums &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.worker_nums -= <span class="number">1</span></span><br><span class="line">        self.manage_workers()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        停止子进程 这里都当做SIGTERM来处理</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'stop workers'</span></span><br><span class="line">        sig = signal.SIGTERM</span><br><span class="line">        self.kill_workers(sig)</span><br><span class="line">        self.kill_workers(signal.SIGKILL)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">halt</span><span class="params">(self, exit_status=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        master 进程自杀</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"master exit"</span></span><br><span class="line">        self.stop()</span><br><span class="line">        sys.exit(exit_status)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reap_workers</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        这里的检测也是为了避免僵尸进程，否则大量资源无法释放</span></span><br><span class="line"><span class="string">        参考：http://www.cnblogs.com/mickole/p/3187770.html</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">                <span class="comment">#os.waitpid 收集僵尸子进程的信息,并把它彻底销毁后返回</span></span><br><span class="line">                <span class="comment">#这里的 -1 代表所有子进程</span></span><br><span class="line">                <span class="comment">#os.WNOHANG 如果没有子进程信息就立刻返回</span></span><br><span class="line">                wpid, status = os.waitpid(<span class="number">-1</span>, os.WNOHANG)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> wpid:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    exitcode = status &gt;&gt; <span class="number">8</span></span><br><span class="line">                    worker = self.WORKERS.pop(wpid, <span class="keyword">None</span>)</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> worker:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment">#errno.ECHILD 是没有子进程错误</span></span><br><span class="line">            <span class="keyword">if</span> e.error != errno.ECHILD:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">manage_workers</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        workers 的健康检查，数量是否对齐等</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">if</span> len(self.WORKERS.keys()) &lt; self.worker_nums:</span><br><span class="line">            self.spawn_workers()</span><br><span class="line"></span><br><span class="line">        workers = self.WORKERS.items()</span><br><span class="line">        <span class="keyword">while</span> len(workers) &gt; self.worker_nums:</span><br><span class="line">            (pid, _) = workers.pop(<span class="number">0</span>)</span><br><span class="line">            self.kill_worker(pid, signal.SIGTERM)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spawn_worker</span><span class="params">(self)</span>:</span></span><br><span class="line">        worker = Worker()</span><br><span class="line">        pid = os.fork()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#master进程处理</span></span><br><span class="line">        <span class="keyword">if</span> pid != <span class="number">0</span>:</span><br><span class="line">            self.WORKERS[pid] = worker</span><br><span class="line">            <span class="keyword">return</span> pid</span><br><span class="line"></span><br><span class="line">        <span class="comment">#worker进程处理</span></span><br><span class="line">        worker_pid = os.getpid()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            worker.run()</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">except</span> SystemExit:</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"work error %s"</span>%str(e)</span><br><span class="line">            sys.exit(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spawn_workers</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.worker_nums - len(self.WORKERS.keys())):</span><br><span class="line">            self.spawn_worker()</span><br><span class="line">            <span class="comment">#为什么要那么端时间的休眠</span></span><br><span class="line">            time.sleep(<span class="number">0.1</span>*random.random())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kill_workers</span><span class="params">(self, sig)</span>:</span></span><br><span class="line">        worker_pids = list(self.WORKERS.keys())</span><br><span class="line">        <span class="keyword">for</span> pid <span class="keyword">in</span> worker_pids:</span><br><span class="line">            self.kill_worker(pid, sig)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kill_worker</span><span class="params">(self, pid, sig)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.kill(pid, sig)</span><br><span class="line">        <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"kill worker error: %s"</span>%str(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    Master().run()</span><br></pre></td></tr></table></figure><h3 id="有用阅读"><a href="#有用阅读" class="headerlink" title="有用阅读"></a>有用阅读</h3><ul><li><a href="http://xiaorui.cc/2015/07/13/python%E4%BD%BF%E7%94%A8master-worker%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9E%8B%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E7%AB%AF/" target="_blank" rel="noopener">python使用master worker管理模型开发服务端</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;prefork-模式是啥？&quot;&gt;&lt;a href=&quot;#prefork-模式是啥？&quot; class=&quot;headerlink&quot; title=&quot;prefork 模式是啥？&quot;&gt;&lt;/a&gt;prefork 模式是啥？&lt;/h3&gt;&lt;p&gt;这种模式最早看到
      
    
    </summary>
    
      <category term="python" scheme="http://orangleliu.info/categories/python/"/>
    
    
      <category term="perfork" scheme="http://orangleliu.info/tags/perfork/"/>
    
  </entry>
  
  <entry>
    <title>Python进程间异步通信之signal模块</title>
    <link href="http://orangleliu.info/2016/03/06/python-signal-module-simple-use/"/>
    <id>http://orangleliu.info/2016/03/06/python-signal-module-simple-use/</id>
    <published>2016-03-06T01:54:21.000Z</published>
    <updated>2016-03-08T14:15:45.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>信号是Unix系统中常见的一种进程间通信方式（IPC），例如我们经常操作的 <code>kill -9 pid</code> 这里的 <code>-9</code>对应的就是 SIGKILL 信号, 9就是这个信号的编号，SIGKILL是它的名称。 由于不同版本的 *nux 的实现会有差异，具体请参照系统API，我这里是OSX，可以使用 <code>man signal</code>查看所有信号的定义。这里<strong>简单的学习</strong>下Python标准库中信号处理的模块 signal模块.</p></blockquote><h3 id="信号是啥？"><a href="#信号是啥？" class="headerlink" title="信号是啥？"></a>信号是啥？</h3><p>由于signal是系统编程的接口，那么咱们来看看他的概念。</p><blockquote><p>信号(signal)是Linux进程间通信的一种机制，全称为软中断信号，也被称为软中断。信号本质上是在软件层次上对硬件中断机制的一种模拟。</p></blockquote><p>再来看看常用的场景</p><blockquote><p>与其他进程间通信方式（例如管道、共享内存等）相比，信号所能传递的信息比较粗糙，只是一个整数。但正是由于传递的信息量少，信号也便于管理和使用，可以用于系统管理相关的任务，例如通知进程终结、中止或者恢复等。每种信号用一个整型常量宏表示，以SIG开头，比如SIGCHLD、SIGINT等，它们在系统头文件&lt;signal.h&gt;中定义。</p></blockquote><p>更具体的介绍和详细的机制原理，请参考 《Unix环境高级编程》等书籍。</p><p>自己的理解就是：可以给一个正在运行的进程发送不同的信号，然后进程就能立即收到这个通知，并且做出响应的行为。</p><p>常用的几个信号</p><table><thead><tr><th>编号</th><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>1</td><td>SIGHUP</td><td>终端挂起或者终止进程。默认动作为终止进程</td></tr><tr><td>2</td><td>SIGINT</td><td>键盘中断 <code>&lt;ctrl+c&gt;</code> 经常会用到。默认动作为终止进程</td></tr><tr><td>3</td><td>SIGQUIT</td><td>键盘退出键被按下。一般用来响应 <code>&lt;ctrl+d&gt;</code>。 默认动作终止进程</td></tr><tr><td>9</td><td>SIGKILL</td><td>强制退出。 shell中经常使用</td></tr><tr><td>14</td><td>SIGALRM</td><td>定时器超时，默认为终止进程</td></tr><tr><td>15</td><td>SIGTERM</td><td>程序结束信号，程序一般会清理完状态在退出，我们一般说的优雅的退出</td></tr></tbody></table><h3 id="signal模块"><a href="#signal模块" class="headerlink" title="signal模块"></a>signal模块</h3><p>在<a href="https://docs.python.org/2/library/signal.html" target="_blank" rel="noopener">文档</a>的开头，讲述了Python signal对于系统的封装和一些使用常识, 使用之前应当认真阅读一下。</p><h4 id="常用的API"><a href="#常用的API" class="headerlink" title="常用的API"></a>常用的API</h4><ul><li><code>signal.signal(signalnum, handler)</code> 针对不同的信号需要定义对应的处理函数，当运行中的程序接受到对应的信号时候，会调用对应的handler。 handler函数应当有2个参数，一个是 signalnum, 另一是 <code>stack frame</code>(None 或者是 <a href="https://docs.python.org/2/reference/datamodel.html#frame-objects" target="_blank" rel="noopener">frame对象</a>)</li></ul><p>例如写一个小程序，来处理 <code>ctrl+c</code>事件和 <code>SIGHUP</code>，也就是1和2信号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment">#orangleliu py2.7</span></span><br><span class="line"><span class="comment">#recv_signal.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_int</span><span class="params">(sig, frame)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"get signal: %s, I will quit"</span>%sig</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_hup</span><span class="params">(sig, frame)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"get signal: %s"</span>%sig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    signal.signal(<span class="number">2</span>, handle_int)</span><br><span class="line">    signal.signal(<span class="number">1</span>, handle_hup)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"My pid is %s"</span>%os.getpid()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>我们来测试下，首先启动程序（根据打印的pid），在另外的窗口输入 <code>kill -1 21838</code> 和 <code>kill -HUP 21838</code>, 最后使用 <code>ctrl+c</code>关闭程序。 程序的输出如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">python</span> recv_signal.<span class="keyword">py</span></span><br><span class="line">My pid <span class="keyword">is</span> <span class="number">21838</span></span><br><span class="line"><span class="built_in">get</span> signa<span class="variable">l:</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">get</span> signa<span class="variable">l:</span> <span class="number">1</span></span><br><span class="line">^Cget signa<span class="variable">l:</span> <span class="number">2</span>, I will <span class="keyword">quit</span></span><br></pre></td></tr></table></figure><ul><li><code>signal.getsignal(signalnum)</code> 根据signalnum返回信号对应的handler，可能是一个可以调用的Python对象，或者是 <code>signal.SIG_IGN</code>（表示被忽略）, <code>signal.SIG_DFL</code>（默认行为已经被使用） 或 <code>None</code>（Python的handler还没被定义）。</li></ul><p>获取signal中定义的信号num和名称，还有它的handler是什么</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment">#orangleliu py2.7</span></span><br><span class="line"><span class="comment">#getsignal_handler.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_hup</span><span class="params">(sig, frame)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"get signal: %s"</span>%sig</span><br><span class="line"></span><br><span class="line">signal.signal(<span class="number">1</span>, handle_hup)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    ign = signal.SIG_IGN</span><br><span class="line">    dfl = signal.SIG_DFL</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"SIG_IGN"</span>, ign</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"SIG_DFL"</span>, dfl</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"*"</span>*<span class="number">40</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> dir(signal):</span><br><span class="line">        <span class="keyword">if</span> name[:<span class="number">3</span>] == <span class="string">"SIG"</span> <span class="keyword">and</span> name[<span class="number">3</span>] != <span class="string">"_"</span>:</span><br><span class="line">            signum = getattr(signal, name)</span><br><span class="line">            gsig = signal.getsignal(signum)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">print</span> name, signum, gsig</span><br></pre></td></tr></table></figure><p>运行的结果：可以看到大部分信号都是都有默认的行为。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">SIG_IGN <span class="number">1</span></span><br><span class="line">SIG_DFL <span class="number">0</span></span><br><span class="line">****************************************</span><br><span class="line">SIGABRT <span class="number">6</span> <span class="number">0</span></span><br><span class="line">SIGALRM <span class="number">14</span> <span class="number">0</span></span><br><span class="line">SIGBUS <span class="number">10</span> <span class="number">0</span></span><br><span class="line">SIGCHLD <span class="number">20</span> <span class="number">0</span></span><br><span class="line">SIGCONT <span class="number">19</span> <span class="number">0</span></span><br><span class="line">SIGEMT <span class="number">7</span> <span class="number">0</span></span><br><span class="line">SIGFPE <span class="number">8</span> <span class="number">0</span></span><br><span class="line">SIGHUP <span class="number">1</span> &lt;function handle_hup at <span class="number">0x109371c80</span>&gt;</span><br><span class="line">SIGILL <span class="number">4</span> <span class="number">0</span></span><br><span class="line">SIGINFO <span class="number">29</span> <span class="number">0</span></span><br><span class="line">SIGINT <span class="number">2</span> &lt;built-in function default_int_handler&gt;</span><br><span class="line">SIGIO <span class="number">23</span> <span class="number">0</span></span><br><span class="line">SIGIOT <span class="number">6</span> <span class="number">0</span></span><br><span class="line">SIGKILL <span class="number">9</span> None</span><br><span class="line">SIGPIPE <span class="number">13</span> <span class="number">1</span></span><br><span class="line">SIGPROF <span class="number">27</span> <span class="number">0</span></span><br><span class="line">SIGQUIT <span class="number">3</span> <span class="number">0</span></span><br><span class="line">SIGSEGV <span class="number">11</span> <span class="number">0</span></span><br><span class="line">SIGSTOP <span class="number">17</span> None</span><br><span class="line">SIGSYS <span class="number">12</span> <span class="number">0</span></span><br><span class="line">SIGTERM <span class="number">15</span> <span class="number">0</span></span><br><span class="line">SIGTRAP <span class="number">5</span> <span class="number">0</span></span><br><span class="line">SIGTSTP <span class="number">18</span> <span class="number">0</span></span><br><span class="line">SIGTTIN <span class="number">21</span> <span class="number">0</span></span><br><span class="line">SIGTTOU <span class="number">22</span> <span class="number">0</span></span><br><span class="line">SIGURG <span class="number">16</span> <span class="number">0</span></span><br><span class="line">SIGUSR1 <span class="number">30</span> <span class="number">0</span></span><br><span class="line">SIGUSR2 <span class="number">31</span> <span class="number">0</span></span><br><span class="line">SIGVTALRM <span class="number">26</span> <span class="number">0</span></span><br><span class="line">SIGWINCH <span class="number">28</span> <span class="number">0</span></span><br><span class="line">SIGXCPU <span class="number">24</span> <span class="number">0</span></span><br><span class="line">SIGXFSZ <span class="number">25</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li><code>多线程使用信号</code><br>多线程环境下使用信号，只有main thread可以设置signal的handler，也有它能接收到signal.  下面用一个例子看看效果。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment">#orangleliu py2.7</span></span><br><span class="line"><span class="comment">#thread_signal.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">usr1_handler</span><span class="params">(num, frame)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"received signal %s %s"</span>%(num, threading.currentThread())</span><br><span class="line"></span><br><span class="line">signal.signal(signal.SIGUSR1, usr1_handler)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_get_signal</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果在子线程中设置signal的handler 会报错</span></span><br><span class="line">    <span class="comment">#ValueError: signal only works in main thread</span></span><br><span class="line">    <span class="comment">#signal.signal(signal.SIGUSR2, usr1_handler)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"waiting for signal in"</span>, threading.currentThread()</span><br><span class="line">    <span class="comment">#sleep 进程直到接收到信号</span></span><br><span class="line">    signal.pause()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"waiting done"</span></span><br><span class="line"></span><br><span class="line">receiver = threading.Thread(target=thread_get_signal, name=<span class="string">"receiver"</span>)</span><br><span class="line">receiver.start()</span><br><span class="line">time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_signal</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"sending signal in "</span>, threading.currentThread()</span><br><span class="line">    os.kill(os.getpid(), signal.SIGUSR1)</span><br><span class="line"></span><br><span class="line">sender = threading.Thread(target=send_signal, name=<span class="string">"sender"</span>)</span><br><span class="line">sender.start()</span><br><span class="line">sender.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'pid'</span>, os.getpid()</span><br><span class="line"><span class="comment">#这里是为了让程序结束，唤醒pause</span></span><br><span class="line">signal.alarm(<span class="number">2</span>)</span><br><span class="line">receiver.join()</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># python thread_signal.py</span><br><span class="line">waiting for signal in <span class="tag">&lt;<span class="name">Thread(receiver,</span> <span class="attr">started</span> <span class="attr">123145306509312</span>)&gt;</span></span><br><span class="line">sending signal in  <span class="tag">&lt;<span class="name">Thread(sender,</span> <span class="attr">started</span> <span class="attr">123145310715904</span>)&gt;</span></span><br><span class="line">received signal 30 <span class="tag">&lt;<span class="name">_MainThread(MainThread,</span> <span class="attr">started</span> <span class="attr">140735138967552</span>)&gt;</span></span><br><span class="line">pid 23188</span><br><span class="line">[1]    23188 alarm      python thread_signal.py</span><br></pre></td></tr></table></figure><ul><li><code>多进程使用信号</code></li></ul><p>主要是模拟下pre-fork模式，代码比较长，另写一篇来说明 [Python 中pre-fork模式的简单实现]</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://docs.python.org/2/library/signal.html" target="_blank" rel="noopener">python docs - signal</a></li><li><a href="https://pymotw.com/2/signal/" target="_blank" rel="noopener">pymotw - signal</a></li><li><a href="http://itsjustsosimple.blogspot.com/2014/01/python-signal-handling-and-identifying.html" target="_blank" rel="noopener">Python - Signal handling and identifying stack frame</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;信号是Unix系统中常见的一种进程间通信方式（IPC），例如我们经常操作的 &lt;code&gt;kill -9 pid&lt;/code&gt; 这里的 &lt;code&gt;-9&lt;/code&gt;对应的就是 SIGKILL 信号, 9就是这个信
      
    
    </summary>
    
      <category term="python" scheme="http://orangleliu.info/categories/python/"/>
    
    
      <category term="系统编程" scheme="http://orangleliu.info/tags/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>2016年后面试之旅</title>
    <link href="http://orangleliu.info/2016/02/26/2016-spring-interview-travel/"/>
    <id>http://orangleliu.info/2016/02/26/2016-spring-interview-travel/</id>
    <published>2016-02-26T05:45:11.000Z</published>
    <updated>2017-03-20T11:08:55.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>从毕业到现在3年有余了吧，3份工作加一起的面试经验也就3，4次左右的样子，基本上都是投了一家公司，面完就去上班了（因为我要的工资低呀。。）。今年过年的时候纠结了很久，想想当前的工资的确难以养家糊口了，虽然没想好到底换不换工作，但是面试的念头已经定下来了。一方面看看这个工作年限的都会面些什么，一方面也想试试自己的水平，还有大家经常讨论大公司小公司的区别，想去体会体会。</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>这是年后的第二周，一共面了3个公司，基本都是失败告终（搜狐还没通知，前两家是这么回事）。</p><h4 id="某安卓助手"><a href="#某安卓助手" class="headerlink" title="某安卓助手"></a>某安卓助手</h4><p>第一家是个在<strong>四惠</strong>的公司，拉勾上邀请去面试的，结果手贱同意了，约了个周一上午。面试之前几乎是一点都没准备吧，到了那首先做了个题（hr连个水都没有给呀），然后来了一个人开始面。题目大概就是链表咋实现，py字符编码问题，说实话，我基本都没答上来，因为以前有问题解决过了就很少有这种问题了，也不记得怎么解决了。基本上都是这些刚学编程的问题吧，三个问题说的我也没啥底气了，那个面试官还有点小高傲，再加上那态度（其实我也呵呵）。后来就结束了。。。给我的感觉是自以为是，专门扣细节，如果我找点题目做下，那可不就是啥都会了呀。</p><h4 id="知乎"><a href="#知乎" class="headerlink" title="知乎"></a>知乎</h4><p>第二个是<strong>知乎</strong>，我是找了个微信上的朋友内推的，投递的职位是个比较陌生的app后端开发（我看了jd就感觉这个比较有意思）。这次hr比较热心，问问从哪来的呀，弄点热水之类的。面试官比较年轻，没有答题，基本都是问些问题，有一些在纸上画画。基本都是按照我自己写的职业技能来问的，有一些问得挺合理，没答出来，有一些就比较怪异（可能他们用的多一些，其实我并不知道），还有一些其实他说的就有问题，大部分回答的挺一般，没接触过的，接触过忘掉的，就直接说了。总得来说面试结果不太好，过程气氛还是不错的。 最后给的拒绝原因是 “技术细节不熟悉”，这也是我现在的一个问题吧。接触的东西多，但是不精通，有主动解决问题能力，有点不求甚解。</p><h4 id="sohu"><a href="#sohu" class="headerlink" title="sohu"></a>sohu</h4><p>第三个是<strong>搜狐手机网</strong>(m.sohu.com),这是找<a href="http://www.the5fire.com" target="_blank" rel="noopener">@the5fire</a>内推的。 我先是在qq上说了想法，然后把简历给他，然后给了我一个题目。一周时间把题目做完，今天去面的。搜狐的媒体大厦挺气派的，第一轮是两个同事面的，也是聊天方式。他们问的问题相对前两家就全面的多了，不管是常用的框架，还是系统架构，还是网络协议，Linux都有涉及吧，我回答的也是一半对一半吧。第二轮是<a href="http://www.the5fire.com" target="_blank" rel="noopener">@the5fire</a>，问的比较细致，也挺有深度，都是平时用的东西比较深入一些的思考，会的不会的我都一五一十的说了。尽管是认识，面试还是要该怎么样就怎么样的，对于不清楚的，有些也给我解答了，算是学到了一些新知识，挺不错。 总结下就是广度还可以，深度比较欠缺，给自己打分也是不及格的。</p><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>通过这几个面试，看到了很多自己的不足，对后面一段时间的成长非常有帮助，感谢给我面试机会的这些公司。同时也看到不同公司对于面试的态度，真是什么样的奇葩都有呀。面试还是挺有收获的，继续加油吧，提高解决问题的能力的同时，也要深入的研究下自己的使用的技术，知其然也要知所以然。把更多时间用在技术深度上，不要花太多的时间在广度上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h3&gt;&lt;p&gt;从毕业到现在3年有余了吧，3份工作加一起的面试经验也就3，4次左右的样子，基本上都是投了一家公司，面完就
      
    
    </summary>
    
      <category term="总结" scheme="http://orangleliu.info/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="面试" scheme="http://orangleliu.info/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="搜狐" scheme="http://orangleliu.info/tags/%E6%90%9C%E7%8B%90/"/>
    
  </entry>
  
</feed>
